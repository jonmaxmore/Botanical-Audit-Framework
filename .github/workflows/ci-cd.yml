name: GACP Platform CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  MONGODB_URI: ${{ secrets.MONGODB_URI_TEST }}

jobs:
  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: './apps/backend/package-lock.json'

      - name: Install backend dependencies
        working-directory: ./apps/backend
        run: npm ci

      - name: Run backend linting
        working-directory: ./apps/backend
        run: npm run lint

      - name: Run backend unit tests
        working-directory: ./apps/backend
        run: npm run test
        env:
          NODE_ENV: test
          MONGODB_URI: ${{ env.MONGODB_URI }}

      - name: Run backend integration tests
        working-directory: ./apps/backend
        run: npm run test:integration
        env:
          NODE_ENV: test
          MONGODB_URI: ${{ env.MONGODB_URI }}

  # Frontend Testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: './frontend-nextjs/package-lock.json'

      - name: Install frontend dependencies
        working-directory: ./frontend-nextjs
        run: npm ci

      - name: Run frontend linting
        working-directory: ./frontend-nextjs
        run: npm run lint

      - name: Run frontend type checking
        working-directory: ./frontend-nextjs
        run: npm run type-check

      - name: Run frontend unit tests
        working-directory: ./frontend-nextjs
        run: npm run test

      - name: Build frontend application
        working-directory: ./frontend-nextjs
        run: npm run build

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd apps/backend && npm ci
          cd ../../frontend-nextjs && npm ci

      - name: Run security audit - Backend
        working-directory: ./apps/backend
        run: npm audit --audit-level moderate

      - name: Run security audit - Frontend
        working-directory: ./frontend-nextjs
        run: npm audit --audit-level moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # End-to-End Integration Tests
  e2e-integration:
    name: E2E Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install all dependencies
        run: |
          cd apps/backend && npm ci
          cd ../../frontend-nextjs && npm ci

      - name: Start backend server
        working-directory: ./apps/backend
        run: |
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/gacp_test?authSource=admin
          PORT: 5000

      - name: Start frontend server
        working-directory: ./frontend-nextjs
        run: |
          npm run build
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          NEXT_PUBLIC_API_URL: http://localhost:5000
          PORT: 3000

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run E2E integration tests
        run: |
          cd apps/backend && npm run test:e2e
        env:
          API_BASE_URL: http://localhost:5000
          FRONTEND_URL: http://localhost:3000

  # Performance Testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [e2e-integration]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ./apps/backend
        run: npm ci

      - name: Start backend for performance testing
        working-directory: ./apps/backend
        run: |
          npm start &
          sleep 10
        env:
          NODE_ENV: production
          MONGODB_URI: ${{ secrets.MONGODB_URI_TEST }}

      - name: Install Artillery
        run: npm install -g artillery@latest

      - name: Run API performance tests
        run: |
          artillery run .github/workflows/performance-tests.yml

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.json

  # Build and Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, e2e-integration]
    if: github.ref == 'refs/heads/develop'

    environment:
      name: staging
      url: https://gacp-staging.dtam.go.th

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build backend
        working-directory: ./apps/backend
        run: |
          npm ci
          npm run build

      - name: Build frontend
        working-directory: ./frontend-nextjs
        run: |
          npm ci
          npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /var/www/gacp-staging
            git pull origin develop
            cd apps/backend && npm ci && pm2 restart gacp-backend-staging
            cd ../../frontend-nextjs && npm ci && npm run build && pm2 restart gacp-frontend-staging

  # Build and Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan, e2e-integration, performance-test]
    if: github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://gacp.dtam.go.th

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build backend
        working-directory: ./apps/backend
        run: |
          npm ci --only=production
          npm run build

      - name: Build frontend
        working-directory: ./frontend-nextjs
        run: |
          npm ci --only=production
          npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}

      - name: Create deployment package
        run: |
          tar -czf gacp-deployment.tar.gz \
            apps/backend/dist \
            apps/backend/package.json \
            apps/backend/package-lock.json \
            frontend-nextjs/.next \
            frontend-nextjs/package.json \
            frontend-nextjs/package-lock.json \
            frontend-nextjs/public

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /var/www/gacp-production
            git pull origin main
            cd apps/backend && npm ci --only=production && pm2 restart gacp-backend-production
            cd ../../frontend-nextjs && npm ci --only=production && npm run build && pm2 restart gacp-frontend-production

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'GACP Platform deployed to production successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup and notifications
  cleanup:
    name: Cleanup and Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Clean up artifacts
        run: |
          echo "Cleaning up build artifacts..."

      - name: Notify team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'GACP Platform CI/CD pipeline failed. Please check the logs.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
