name: CD - Deploy to Production

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

env:
  NODE_VERSION: '18.x'
  DEPLOYMENT_ENVIRONMENT: production

jobs:
  # Job 1: Pre-deployment Checks
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for breaking changes
        run: |
          echo "Checking for breaking changes..."
          # Add breaking change detection logic

      - name: Validate version
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Deploying version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        id: version

      - name: Check production readiness
        run: |
          echo "✅ All pre-deployment checks passed"

  # Job 2: Build Production
  build:
    name: Build Production Application
    runs-on: ubuntu-latest
    needs: [pre-deployment]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --production=false

      - name: Run full test suite
        run: npm run test:ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}

      - name: Generate source maps
        run: npm run build:sourcemaps

      - name: Upload source maps to Sentry
        run: |
          npx @sentry/cli releases new "${{ github.sha }}"
          npx @sentry/cli releases files "${{ github.sha }}" upload-sourcemaps .next
          npx @sentry/cli releases finalize "${{ github.sha }}"
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}

      - name: Create deployment package
        run: |
          tar -czf production-build.tar.gz \
            .next/ \
            public/ \
            prisma/ \
            package.json \
            package-lock.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: production-build.tar.gz
          retention-days: 30

  # Job 3: Build Docker Image
  docker:
    name: Build Production Docker Image
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/gacp-admin-portal
            ${{ secrets.AWS_ECR_REGISTRY }}/gacp-admin-portal
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=prod-
            type=raw,value=production
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/gacp-admin-portal:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/gacp-admin-portal:buildcache,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/gacp-admin-portal:production
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  # Job 4: Database Backup
  database-backup:
    name: Backup Production Database
    runs-on: ubuntu-latest
    needs: [build]
    environment: production

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Create RDS snapshot
        run: |
          SNAPSHOT_ID="gacp-prod-backup-$(date +%Y%m%d-%H%M%S)"
          aws rds create-db-snapshot \
            --db-instance-identifier gacp-prod-db \
            --db-snapshot-identifier $SNAPSHOT_ID

          echo "Waiting for snapshot to complete..."
          aws rds wait db-snapshot-completed \
            --db-snapshot-identifier $SNAPSHOT_ID

          echo "snapshot_id=$SNAPSHOT_ID" >> $GITHUB_OUTPUT
        id: backup

      - name: Verify backup
        run: |
          aws rds describe-db-snapshots \
            --db-snapshot-identifier ${{ steps.backup.outputs.snapshot_id }} \
            --query 'DBSnapshots[0].Status' \
            --output text

  # Job 5: Manual Approval
  approval:
    name: Manual Deployment Approval
    runs-on: ubuntu-latest
    needs: [docker, database-backup]
    environment:
      name: production-approval
      url: https://admin.gacp-certify.com

    steps:
      - name: Wait for approval
        run: echo "Deployment approved by ${{ github.actor }}"

  # Job 6: Database Migration
  database-migration:
    name: Run Production Migrations
    runs-on: ubuntu-latest
    needs: [approval]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Check pending migrations
        run: |
          PENDING=$(npx prisma migrate status --schema=./prisma/schema.prisma)
          echo "$PENDING"
          if echo "$PENDING" | grep -q "Database schema is up to date"; then
            echo "No migrations needed"
          else
            echo "Migrations pending"
          fi
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Run migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Verify database integrity
        run: npx prisma validate
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

  # Job 7: Blue-Green Deployment
  deploy-blue-green:
    name: Deploy with Blue-Green Strategy
    runs-on: ubuntu-latest
    needs: [approval, database-migration]
    environment: production

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Get current deployment
        id: current
        run: |
          CURRENT_ENV=$(aws elasticbeanstalk describe-environments \
            --application-name gacp-admin-portal \
            --environment-names gacp-prod-blue gacp-prod-green \
            --query 'Environments[?Status==`Ready`].EnvironmentName' \
            --output text | head -n1)

          if [ "$CURRENT_ENV" == "gacp-prod-blue" ]; then
            echo "current=blue" >> $GITHUB_OUTPUT
            echo "target=green" >> $GITHUB_OUTPUT
          else
            echo "current=green" >> $GITHUB_OUTPUT
            echo "target=blue" >> $GITHUB_OUTPUT
          fi

          echo "Current: $CURRENT_ENV, Target: ${{ steps.current.outputs.target }}"

      - name: Deploy to target environment
        run: |
          aws elasticbeanstalk update-environment \
            --application-name gacp-admin-portal \
            --environment-name gacp-prod-${{ steps.current.outputs.target }} \
            --version-label v${{ github.run_number }}

      - name: Wait for deployment
        run: |
          aws elasticbeanstalk wait environment-updated \
            --application-name gacp-admin-portal \
            --environment-names gacp-prod-${{ steps.current.outputs.target }}

      - name: Health check target environment
        run: |
          TARGET_URL=$(aws elasticbeanstalk describe-environments \
            --application-name gacp-admin-portal \
            --environment-names gacp-prod-${{ steps.current.outputs.target }} \
            --query 'Environments[0].CNAME' \
            --output text)

          for i in {1..20}; do
            if curl -f https://$TARGET_URL/api/health/ready; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 15
          done
          echo "Health check failed"
          exit 1

      - name: Switch traffic
        run: |
          aws elasticbeanstalk swap-environment-cnames \
            --source-environment-name gacp-prod-${{ steps.current.outputs.current }} \
            --destination-environment-name gacp-prod-${{ steps.current.outputs.target }}

      - name: Monitor new environment
        run: |
          echo "Monitoring for 5 minutes..."
          sleep 300

      - name: Verify production
        run: |
          if curl -f https://admin.gacp-certify.com/api/health/ready; then
            echo "Production verification successful!"
          else
            echo "Production verification failed!"
            exit 1
          fi

  # Job 8: Post-Deployment Tests
  post-deployment:
    name: Production Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-blue-green]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run smoke tests
        run: npm run test:smoke:production
        env:
          BASE_URL: https://admin.gacp-certify.com
          TEST_EMAIL: ${{ secrets.PROD_TEST_EMAIL }}
          TEST_PASSWORD: ${{ secrets.PROD_TEST_PASSWORD }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-smoke-tests
          path: test-results/

  # Job 9: Performance Validation
  performance-check:
    name: Validate Production Performance
    runs-on: ubuntu-latest
    needs: [deploy-blue-green]

    steps:
      - name: Run Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://admin.gacp-certify.com
            https://admin.gacp-certify.com/dashboard
            https://admin.gacp-certify.com/applications
          uploadArtifacts: true
          temporaryPublicStorage: true
          budgetPath: ./.lighthouserc.json

      - name: Run synthetic monitoring
        run: |
          # Add synthetic monitoring checks
          echo "Running synthetic monitoring..."

  # Job 10: Rollback on Failure
  rollback:
    name: Automatic Rollback
    runs-on: ubuntu-latest
    needs: [post-deployment, performance-check]
    if: failure()
    environment: production

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Rollback deployment
        run: |
          echo "🔄 Rolling back deployment..."

          # Swap back to previous environment
          aws elasticbeanstalk swap-environment-cnames \
            --source-environment-name gacp-prod-green \
            --destination-environment-name gacp-prod-blue

          echo "Rollback completed"

      - name: Restore database snapshot
        if: failure()
        run: |
          # Get latest backup snapshot
          SNAPSHOT_ID=$(aws rds describe-db-snapshots \
            --db-instance-identifier gacp-prod-db \
            --query 'DBSnapshots[0].DBSnapshotIdentifier' \
            --output text)

          echo "Restoring from snapshot: $SNAPSHOT_ID"
          # Add restore logic if needed

  # Job 11: Update Monitoring
  update-monitoring:
    name: Update Monitoring & Alerting
    runs-on: ubuntu-latest
    needs: [deploy-blue-green]

    steps:
      - name: Update Sentry release
        run: |
          curl -X POST https://sentry.io/api/0/organizations/${{ secrets.SENTRY_ORG }}/releases/ \
            -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"version\": \"${{ github.sha }}\",
              \"projects\": [\"${{ secrets.SENTRY_PROJECT }}\"],
              \"refs\": [{
                \"repository\": \"${{ github.repository }}\",
                \"commit\": \"${{ github.sha }}\"
              }]
            }"

      - name: Create deployment marker in Grafana
        run: |
          curl -X POST ${{ secrets.GRAFANA_URL }}/api/annotations \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"text\": \"Production deployment: ${{ github.sha }}\",
              \"tags\": [\"deployment\", \"production\"],
              \"time\": $(date +%s)000
            }"

  # Job 12: Notifications
  notify:
    name: Send Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-blue-green, post-deployment, performance-check]
    if: always()

    steps:
      - name: Determine status
        id: status
        run: |
          if [[ "${{ needs.deploy-blue-green.result }}" == "success" ]] && \
             [[ "${{ needs.post-deployment.result }}" == "success" ]] && \
             [[ "${{ needs.performance-check.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=🎉" >> $GITHUB_OUTPUT
            echo "message=Production deployment successful!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=Production deployment failed!" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          text: |
            ${{ steps.status.outputs.emoji }} Production Deployment ${{ steps.status.outputs.status }}

            Version: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Deployed by: ${{ github.actor }}
            URL: https://admin.gacp-certify.com
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,workflow

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: ${{ steps.status.outputs.emoji }} Production Deployment - ${{ steps.status.outputs.status }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: GitHub Actions
          body: |
            Production deployment ${{ steps.status.outputs.status }}

            Application: GACP Admin Portal
            Environment: Production
            Version: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Deployed by: ${{ github.actor }}

            URL: https://admin.gacp-certify.com

            View workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Create GitHub release
        if: steps.status.outputs.status == 'success' && startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Production Deployment

            Successfully deployed to production.

            ### Changes
            - See commit history for details

            ### Deployment Info
            - Commit: ${{ github.sha }}
            - Deployed by: ${{ github.actor }}
            - Date: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false
