name: CD - Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  DEPLOYMENT_ENVIRONMENT: staging

jobs:
  # Job 1: Build and Test
  build:
    name: Build Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: staging-build
          path: |
            .next/
            public/
            package.json
            package-lock.json
            prisma/

  # Job 2: Build Docker Image
  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/gacp-admin-portal:staging
            ${{ secrets.DOCKER_USERNAME }}/gacp-admin-portal:staging-${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/gacp-admin-portal:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/gacp-admin-portal:buildcache,mode=max

  # Job 3: Database Migration
  database-migration:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [build]
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Backup database
        run: |
          echo "Creating database backup..."
          # Add your backup command here
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Run migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Verify migrations
        run: npx prisma db push --skip-generate
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

  # Job 4: Deploy to Staging
  deploy:
    name: Deploy to Staging Server
    runs-on: ubuntu-latest
    needs: [docker, database-migration]
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster gacp-staging-cluster \
            --service gacp-admin-portal-staging \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster gacp-staging-cluster \
            --services gacp-admin-portal-staging

      - name: Get deployment status
        id: deployment
        run: |
          STATUS=$(aws ecs describe-services \
            --cluster gacp-staging-cluster \
            --services gacp-admin-portal-staging \
            --query 'services[0].deployments[0].status' \
            --output text)
          echo "status=$STATUS" >> $GITHUB_OUTPUT

  # Job 5: Health Check
  health-check:
    name: Verify Deployment Health
    runs-on: ubuntu-latest
    needs: [deploy]

    steps:
      - name: Wait for application startup
        run: sleep 30

      - name: Check health endpoint
        run: |
          for i in {1..10}; do
            if curl -f ${{ secrets.STAGING_URL }}/api/health/ready; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 10
          done
          echo "Health check failed after 10 attempts"
          exit 1

      - name: Test critical endpoints
        run: |
          # Test login endpoint
          curl -f ${{ secrets.STAGING_URL }}/api/auth/login -X POST \
            -H "Content-Type: application/json" \
            -d '{"email":"test@example.com","password":"test"}'

          # Test applications endpoint
          curl -f ${{ secrets.STAGING_URL }}/api/applications \
            -H "Authorization: Bearer test-token"

  # Job 6: Smoke Tests
  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: [health-check]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          BASE_URL: ${{ secrets.STAGING_URL }}
          TEST_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results
          path: test-results/

  # Job 7: Performance Check
  performance:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: [health-check]

    steps:
      - name: Run Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ secrets.STAGING_URL }}
            ${{ secrets.STAGING_URL }}/dashboard
            ${{ secrets.STAGING_URL }}/applications
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Check performance budget
        run: |
          echo "Performance check completed"
          # Add performance budget checks here

  # Job 8: Rollback on Failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [health-check, smoke-tests]
    if: failure()
    environment: staging

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Rollback ECS service
        run: |
          # Get previous task definition
          PREVIOUS_TASK_DEF=$(aws ecs describe-services \
            --cluster gacp-staging-cluster \
            --services gacp-admin-portal-staging \
            --query 'services[0].deployments[1].taskDefinition' \
            --output text)

          # Update service to previous task definition
          aws ecs update-service \
            --cluster gacp-staging-cluster \
            --service gacp-admin-portal-staging \
            --task-definition $PREVIOUS_TASK_DEF

      - name: Notify rollback
        run: echo "Deployment rolled back due to failures"

  # Job 9: Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy, health-check, smoke-tests, performance]
    if: always()

    steps:
      - name: Determine status
        id: status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]] && \
             [[ "${{ needs.health-check.result }}" == "success" ]] && \
             [[ "${{ needs.smoke-tests.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=Staging deployment successful!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Staging deployment failed!" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          text: ${{ steps.status.outputs.message }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,eventName,workflow

      - name: Create deployment comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Staging deployment ${{ steps.status.outputs.status }}!\n\nURL: ${{ secrets.STAGING_URL }}\nCommit: ${context.sha}`
            })
