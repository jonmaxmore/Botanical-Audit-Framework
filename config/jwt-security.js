/**
 * ================================================================
 * SECURE JWT CONFIGURATION MODULE
 * ================================================================
 *
 * ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏õ (WHY):
 * - JWT secret ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ fallback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô security breach
 * - ‡πÅ‡∏¢‡∏Å JWT secret ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Farmer (public) ‡πÅ‡∏•‡∏∞ DTAM (government staff)
 * - ‡πÉ‡∏ä‡πâ fail-fast principle: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ secret ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default
 *
 * Logic ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (HOW):
 * 1. ‡∏≠‡πà‡∏≤‡∏ô JWT secrets ‡∏à‡∏≤‡∏Å environment variables
 * 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà default value ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
 * 3. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‚Üí throw Error ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‚Üí app ‡πÑ‡∏°‡πà start
 * 4. ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô ‚Üí return configuration object
 *
 * Workflow:
 * ```
 * App Start ‚Üí Load .env ‚Üí validateJWTSecrets() ‚Üí
 *   ‚îú‚îÄ Valid ‚Üí Continue app initialization
 *   ‚îî‚îÄ Invalid ‚Üí Throw Error ‚Üí Process Exit
 * ```
 *
 * ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (RESULT):
 * - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà app ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡πÉ‡∏ô production ‡∏î‡πâ‡∏ß‡∏¢ default secret
 * - Developer ‡∏à‡∏∞‡πÑ‡∏î‡πâ clear error message ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£
 * - ‡πÅ‡∏¢‡∏Å security context ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á public ‡πÅ‡∏•‡∏∞ government ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
 *
 * ================================================================
 */

const crypto = require('crypto');

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô unsafe default ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 *
 * @param {string} value - ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 * @returns {boolean} - true ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô unsafe default
 */
function isUnsafeDefault(value) {
  if (!value || typeof value !== 'string') {
    return true;
  }

  const unsafePatterns = [
    'your-secret',
    'your-super-secret',
    'change-in-production',
    'change-this',
    'gacp-secret-key',
    'gacp-dtam-secret',
    'gacp-platform-secret',
    'example-secret',
    'test-secret',
    'secret-key-here'
  ];

  const lowerValue = value.toLowerCase();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ pattern ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  for (const pattern of unsafePatterns) {
    if (lowerValue.includes(pattern)) {
      return true;
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (secret ‡∏Ñ‡∏ß‡∏£‡∏¢‡∏≤‡∏ß‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£)
  if (value.length < 32) {
    return true;
  }

  return false;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á secure random secret (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
 *
 * @returns {string} - Random hex string
 */
function generateSecureSecret() {
  return crypto.randomBytes(64).toString('hex');
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î JWT configuration
 *
 * Logic:
 * 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö NODE_ENV
 * 2. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development: ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ auto-generate secret
 * 3. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production/staging: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ secret ‡πÄ‡∏≠‡∏á
 * 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà unsafe default
 *
 * @throws {Error} ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ secret ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô unsafe default ‡πÉ‡∏ô production
 * @returns {Object} JWT configuration
 */
function loadJWTConfiguration() {
  const env = process.env.NODE_ENV || 'development';
  const isDevelopment = env === 'development' || env === 'test';

  console.log(`\n${'='.repeat(80)}`);
  console.log('üîê JWT SECURITY CONFIGURATION');
  console.log(`${'='.repeat(80)}\n`);
  console.log(`Environment: ${env}`);
  console.log(
    `Security Level: ${isDevelopment ? 'Development (Relaxed)' : 'Production (Strict)'}\n`
  );

  // =====================================
  // PUBLIC JWT SECRET (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Farmers)
  // =====================================
  let jwtSecret = process.env.JWT_SECRET;

  if (!jwtSecret) {
    if (isDevelopment) {
      // Development: auto-generate ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      jwtSecret = generateSecureSecret();
      console.warn('‚ö†Ô∏è  JWT_SECRET not set - Generated temporary secret for DEVELOPMENT');
      console.warn('   Secret:', jwtSecret.substring(0, 16) + '...');
      console.warn('   ‚ö†Ô∏è  DO NOT use this in production!\n');
    } else {
      // Production: throw error
      throw new Error(
        'üö® SECURITY ERROR: JWT_SECRET is required in production\n' +
          '   \n' +
          '   Why: JWT tokens secure user sessions. Without a secret, anyone can forge tokens.\n' +
          '   \n' +
          '   How to fix:\n' +
          '   1. Generate a secure secret:\n' +
          '      node -e "console.log(require(\'crypto\').randomBytes(64).toString(\'hex\'))"\n' +
          '   \n' +
          '   2. Set it in your .env file:\n' +
          '      JWT_SECRET=<your-generated-secret>\n' +
          '   \n' +
          '   3. Restart the application\n'
      );
    }
  } else if (isUnsafeDefault(jwtSecret)) {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô unsafe default
    if (isDevelopment) {
      console.warn('‚ö†Ô∏è  JWT_SECRET appears to be an unsafe default');
      console.warn('   Consider generating a secure secret even for development\n');
    } else {
      throw new Error(
        'üö® SECURITY ERROR: JWT_SECRET contains unsafe default value\n' +
          '   \n' +
          '   Current value: ' +
          jwtSecret.substring(0, 30) +
          '...\n' +
          '   \n' +
          '   Problem: This secret is insecure and should not be used in production\n' +
          '   \n' +
          '   How to fix:\n' +
          '   1. Generate a NEW secure secret:\n' +
          '      node -e "console.log(require(\'crypto\').randomBytes(64).toString(\'hex\'))"\n' +
          '   \n' +
          '   2. Update your .env file with the new secret\n' +
          '   3. Restart the application\n'
      );
    }
  } else {
    console.log('‚úÖ JWT_SECRET: Configured (length: ' + jwtSecret.length + ' characters)');
  }

  // =====================================
  // DTAM JWT SECRET (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Government Staff)
  // =====================================
  let dtamJwtSecret = process.env.DTAM_JWT_SECRET;

  if (!dtamJwtSecret) {
    if (isDevelopment) {
      // Development: auto-generate ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      dtamJwtSecret = generateSecureSecret();
      console.warn('‚ö†Ô∏è  DTAM_JWT_SECRET not set - Generated temporary secret for DEVELOPMENT');
      console.warn('   Secret:', dtamJwtSecret.substring(0, 16) + '...');
      console.warn('   ‚ö†Ô∏è  DO NOT use this in production!\n');
    } else {
      // Production: throw error
      throw new Error(
        'üö® SECURITY ERROR: DTAM_JWT_SECRET is required in production\n' +
          '   \n' +
          '   Why: DTAM staff tokens must use a separate secret from public users.\n' +
          '        This ensures government staff sessions are isolated and more secure.\n' +
          '   \n' +
          '   How to fix:\n' +
          '   1. Generate a DIFFERENT secure secret (not same as JWT_SECRET):\n' +
          '      node -e "console.log(require(\'crypto\').randomBytes(64).toString(\'hex\'))"\n' +
          '   \n' +
          '   2. Set it in your .env file:\n' +
          '      DTAM_JWT_SECRET=<your-generated-secret>\n' +
          '   \n' +
          '   3. Restart the application\n'
      );
    }
  } else if (isUnsafeDefault(dtamJwtSecret)) {
    if (isDevelopment) {
      console.warn('‚ö†Ô∏è  DTAM_JWT_SECRET appears to be an unsafe default');
      console.warn('   Consider generating a secure secret even for development\n');
    } else {
      throw new Error(
        'üö® SECURITY ERROR: DTAM_JWT_SECRET contains unsafe default value\n' +
          '   \n' +
          '   Current value: ' +
          dtamJwtSecret.substring(0, 30) +
          '...\n' +
          '   \n' +
          '   Problem: This secret is insecure and should not be used in production\n' +
          '   \n' +
          '   How to fix: (same as JWT_SECRET above)\n'
      );
    }
  } else {
    console.log('‚úÖ DTAM_JWT_SECRET: Configured (length: ' + dtamJwtSecret.length + ' characters)');
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ JWT_SECRET ‡πÅ‡∏•‡∏∞ DTAM_JWT_SECRET ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
  if (jwtSecret === dtamJwtSecret && !isDevelopment) {
    throw new Error(
      'üö® SECURITY ERROR: JWT_SECRET and DTAM_JWT_SECRET must be different\n' +
        '   \n' +
        '   Why: Using the same secret for public and government staff tokens\n' +
        '        creates a security risk. If one is compromised, both are compromised.\n' +
        '   \n' +
        '   How to fix:\n' +
        '   1. Generate TWO different secrets\n' +
        '   2. Set them separately in .env file\n'
    );
  }

  // =====================================
  // JWT EXPIRY CONFIGURATION
  // =====================================
  const jwtExpiry = process.env.JWT_EXPIRY || '24h';
  const dtamJwtExpiry = process.env.DTAM_JWT_EXPIRY || '8h'; // DTAM ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

  console.log('‚úÖ JWT_EXPIRY: ' + jwtExpiry);
  console.log('‚úÖ DTAM_JWT_EXPIRY: ' + dtamJwtExpiry);

  console.log(`\n${'='.repeat(80)}`);
  console.log('‚úÖ JWT CONFIGURATION LOADED SUCCESSFULLY');
  console.log(`${'='.repeat(80)}\n`);

  // Return configuration object
  return {
    public: {
      secret: jwtSecret,
      expiry: jwtExpiry,
      algorithm: 'HS256',
      issuer: 'gacp-platform',
      audience: 'gacp-public-users'
    },
    dtam: {
      secret: dtamJwtSecret,
      expiry: dtamJwtExpiry,
      algorithm: 'HS256',
      issuer: 'gacp-platform',
      audience: 'gacp-dtam-staff'
    },
    environment: env,
    isDevelopment
  };
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token ‡∏î‡πâ‡∏ß‡∏¢ secret ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 *
 * @param {string} token - JWT token
 * @param {string} type - 'public' ‡∏´‡∏£‡∏∑‡∏≠ 'dtam'
 * @param {Object} config - JWT configuration from loadJWTConfiguration()
 * @returns {Object} Decoded token payload
 * @throws {Error} ‡∏ñ‡πâ‡∏≤ token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */
function verifyToken(token, type, config) {
  const jwt = require('jsonwebtoken');

  const jwtConfig = type === 'dtam' ? config.dtam : config.public;

  try {
    return jwt.verify(token, jwtConfig.secret, {
      issuer: jwtConfig.issuer,
      audience: jwtConfig.audience,
      algorithms: [jwtConfig.algorithm]
    });
  } catch (error) {
    // Enhanced error messages
    if (error.name === 'TokenExpiredError') {
      const err = new Error('Token has expired');
      err.code = 'TOKEN_EXPIRED';
      err.expiredAt = error.expiredAt;
      throw err;
    }

    if (error.name === 'JsonWebTokenError') {
      const err = new Error('Invalid token');
      err.code = 'INVALID_TOKEN';
      throw err;
    }

    throw error;
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
 *
 * @param {Object} payload - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏ô token
 * @param {string} type - 'public' ‡∏´‡∏£‡∏∑‡∏≠ 'dtam'
 * @param {Object} config - JWT configuration
 * @returns {string} JWT token
 */
function signToken(payload, type, config) {
  const jwt = require('jsonwebtoken');

  const jwtConfig = type === 'dtam' ? config.dtam : config.public;

  return jwt.sign(payload, jwtConfig.secret, {
    expiresIn: jwtConfig.expiry,
    issuer: jwtConfig.issuer,
    audience: jwtConfig.audience,
    algorithm: jwtConfig.algorithm
  });
}

module.exports = {
  loadJWTConfiguration,
  verifyToken,
  signToken,
  generateSecureSecret,
  isUnsafeDefault
};
