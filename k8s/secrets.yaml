# Kubernetes Secrets Template
# DO NOT commit actual secrets to version control!
# Use kubectl create secret or external secret managers

---
# Application Secrets Template
# Create with: kubectl create secret generic app-secrets --from-literal=... -n gacp-production

apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: gacp-production
type: Opaque
stringData:
  # MongoDB Connection
  MONGODB_URI: 'mongodb+srv://gacp_admin:CHANGE_ME@gacp-production.xxxxx.mongodb.net/gacp_production?retryWrites=true&w=majority&readPreference=secondaryPreferred'
  MONGODB_USERNAME: 'gacp_admin'
  MONGODB_PASSWORD: 'CHANGE_ME_STRONG_PASSWORD'
  MONGODB_DATABASE: 'gacp_production'

  # Redis (if password protected)
  REDIS_PASSWORD: ''

  # JWT Secrets (generate with: openssl rand -hex 32)
  JWT_SECRET: 'CHANGE_ME_64_CHARACTERS_MINIMUM_JWT_SECRET_KEY'
  JWT_REFRESH_SECRET: 'CHANGE_ME_64_CHARACTERS_MINIMUM_REFRESH_SECRET_KEY'
  SESSION_SECRET: 'CHANGE_ME_64_CHARACTERS_MINIMUM_SESSION_SECRET_KEY'

  # Email/SMTP
  SMTP_USER: 'apikey'
  SMTP_PASSWORD: 'SG.xxxxxxxxxxxxxxxxxxxx'

  # AWS Credentials
  AWS_ACCESS_KEY_ID: 'AKIAXXXXXXXXXXXXXXXX'
  AWS_SECRET_ACCESS_KEY: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'

  # Payment Gateway
  PROMPTPAY_API_KEY: 'pk_live_xxxxxxxxxxxxxxxxxxxx'
  OMISE_PUBLIC_KEY: 'pkey_live_xxxxxxxxxxxxxxxxxxxx'
  OMISE_SECRET_KEY: 'skey_live_xxxxxxxxxxxxxxxxxxxx'

  # Error Tracking
  SENTRY_DSN: 'https://xxxxx@xxxxx.ingest.sentry.io/xxxxx'
  SENTRY_AUTH_TOKEN: 'xxxxxxxxxxxxxxxxxxxx'

  # API Keys
  ENCRYPTION_KEY: 'CHANGE_ME_32_CHARACTERS_MINIMUM'

  # DTAM API
  DTAM_API_KEY: 'CHANGE_ME'
  DTAM_API_SECRET: 'CHANGE_ME'

  # Line Notify
  LINE_NOTIFY_TOKEN: 'CHANGE_ME'

---
# Redis Secrets
apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
  namespace: gacp-production
type: Opaque
stringData:
  REDIS_HOST: 'redis-service.gacp-production.svc.cluster.local'
  REDIS_PORT: '6379'
  REDIS_PASSWORD: ''
  REDIS_DB: '0'

---
# TLS Certificate Secret (for HTTPS)
# Create with: kubectl create secret tls tls-secret --cert=path/to/tls.crt --key=path/to/tls.key -n gacp-production
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: gacp-production
type: kubernetes.io/tls
data:
  # Base64 encoded certificate and key
  tls.crt: LS0tLS1CRUdJTi... # Add your certificate
  tls.key: LS0tLS1CRUdJTi... # Add your private key

---
# Docker Registry Secret (if using private registry)
# Create with: kubectl create secret docker-registry regcred --docker-server=<your-registry-server> --docker-username=<your-name> --docker-password=<your-password> --docker-email=<your-email> -n gacp-production
apiVersion: v1
kind: Secret
metadata:
  name: regcred
  namespace: gacp-production
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsidXNlcm5hbWUiOiJ5b3VydXNlcm5hbWUiLCJwYXNzd29yZCI6InlvdXJwYXNzd29yZCIsImVtYWlsIjoieW91cmVtYWlsQGV4YW1wbGUuY29tIiwiYXV0aCI6ImJhc2U2NGVuY29kZWQifX19

---
# Instructions for creating secrets:

# 1. Create from literal values:
#    kubectl create secret generic app-secrets \
#      --from-literal=DATABASE_URL='postgresql://...' \
#      --from-literal=JWT_SECRET='your-secret' \
#      -n gacp-production

# 2. Create from file:
#    kubectl create secret generic app-secrets \
#      --from-env-file=.env.production \
#      -n gacp-production

# 3. Create TLS secret:
#    kubectl create secret tls tls-secret \
#      --cert=tls.crt \
#      --key=tls.key \
#      -n gacp-production

# 4. View secrets (base64 encoded):
#    kubectl get secret app-secrets -n gacp-production -o yaml

# 5. Decode secret value:
#    kubectl get secret app-secrets -n gacp-production -o jsonpath='{.data.JWT_SECRET}' | base64 --decode

# 6. Delete secret:
#    kubectl delete secret app-secrets -n gacp-production

# 7. Update secret:
#    kubectl create secret generic app-secrets --from-literal=KEY=VALUE --dry-run=client -o yaml | kubectl apply -f -
