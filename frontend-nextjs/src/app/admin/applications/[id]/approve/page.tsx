'use client';

import React, { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import {
  Box,
  Container,
  Typography,
  Paper,
  Grid,
  Button,
  Divider,
  Alert,
  CircularProgress,
  Stepper,
  Step,
  StepLabel,
  Chip,
  Card,
  CardContent,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Rating,
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  CheckCircle as CheckCircleIcon,
  Cancel as CancelIcon,
  Info as InfoIcon,
  Description as DescriptionIcon,
  Assessment as AssessmentIcon,
  ExpandMore as ExpandMoreIcon,
  Star as StarIcon,
  Warning as WarningIcon,
} from '@mui/icons-material';
import { withAuth } from '@/components/auth/withAuth';
import { useApplicationContext, type Application } from '@/contexts/ApplicationContext';

/**
 * Admin Approval Page
 *
 * ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (Step 7)
 * - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£
 * - ‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (Step 3)
 * - ‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ü‡∏≤‡∏£‡πå‡∏° (Step 6) - ‚≠ê ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 8 CCPs
 * - ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à: Approve / Reject / Request Info
 */

const AdminApprovalPage: React.FC = () => {
  const router = useRouter();
  const params = useParams();
  const applicationId = params?.id as string;
  const { applications, updateApplication } = useApplicationContext();

  const [loading, setLoading] = useState(true);
  const [application, setApplication] = useState<Application | null>(null);
  const [decision, setDecision] = useState<'approve' | 'reject' | 'info' | ''>('');
  const [adminNotes, setAdminNotes] = useState('');
  const [confirmDialog, setConfirmDialog] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    if (applicationId) {
      loadApplication();
    }
  }, [applicationId, applications]);

  const loadApplication = () => {
    const app = applications.find((a) => a.id === applicationId);
    if (app) {
      setApplication(app);
      setLoading(false);
    } else {
      router.push('/admin/dashboard');
    }
  };

  const handleOpenConfirm = () => {
    if (!decision) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á');
      return;
    }
    setConfirmDialog(true);
  };

  const handleCloseConfirm = () => {
    setConfirmDialog(false);
  };

  const handleSubmit = async () => {
    if (!application) return;

    setSubmitting(true);

    try {
      let newState: Application['workflowState'];
      let newStep: number;

      if (decision === 'approve') {
        newState = 'APPROVED';
        newStep = 8; // Certificate Issuance
      } else if (decision === 'reject') {
        newState = 'REJECTED';
        newStep = 7; // Stay at step 7
      } else {
        newState = 'PENDING_APPROVAL';
        newStep = 7; // Stay at step 7
      }

      const updatedApp: Application = {
        ...application,
        workflowState: newState,
        currentStep: newStep,
        approvalData: {
          decision: decision,
          notes: adminNotes,
          approvedAt: new Date().toISOString(),
          approvedBy: 'ADMIN',
        },
      };

      updateApplication(updatedApp);

      if (decision === 'approve') {
        alert('‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á GACP');
      } else if (decision === 'reject') {
        alert('‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£ - ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£');
      } else {
        alert('‚ÑπÔ∏è ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°');
      }

      router.push('/admin/dashboard');
    } catch (error) {
      console.error('Error submitting approval:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    } finally {
      setSubmitting(false);
      handleCloseConfirm();
    }
  };

  if (loading || !application) {
    return (
      <Box
        sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '80vh' }}
      >
        <CircularProgress />
      </Box>
    );
  }

  // Get review data (Step 3)
  const reviewData = application.reviewData;

  // Get inspection data (Step 6)
  const inspectionData = application.inspectionData;
  const inspectionScore = inspectionData?.totalScore || 0;
  const inspectionPass = inspectionData?.passStatus || 'fail';

  // Determine recommendation based on inspection score
  const getRecommendation = () => {
    if (inspectionScore >= 90)
      return { text: '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏© ‚≠ê', color: 'success', icon: '‚úÖ' };
    if (inspectionScore >= 80) return { text: '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', color: 'success', icon: '‚úÖ' };
    if (inspectionScore >= 70)
      return { text: '‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç', color: 'warning', icon: '‚ö†Ô∏è' };
    return { text: '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò', color: 'error', icon: '‚ùå' };
  };

  const recommendation = getRecommendation();

  // Workflow steps
  const steps = [
    '‡∏¢‡∏∑‡πà‡∏ô‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£',
    '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 1',
    '‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£',
    '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
    '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2',
    '‡∏ï‡∏£‡∏ß‡∏à‡∏ü‡∏≤‡∏£‡πå‡∏°',
    '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢',
    '‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á',
  ];

  return (
    <Container maxWidth="xl" sx={{ py: 4 }}>
      {/* Header */}
      <Box sx={{ mb: 4 }}>
        <Button startIcon={<ArrowBackIcon />} onClick={() => router.back()} sx={{ mb: 2 }}>
          ‡∏Å‡∏•‡∏±‡∏ö
        </Button>
        <Typography variant="h4" component="h1" gutterBottom fontWeight="bold">
          ‚úÖ Final Approval (‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
        </Typography>
        <Typography variant="body1" color="text.secondary">
          {application.applicationNumber} - {application.farmInfo?.name}
        </Typography>
      </Box>

      {/* Workflow Progress */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Stepper activeStep={application.currentStep - 1} alternativeLabel>
          {steps.map((label, index) => (
            <Step key={label} completed={index < application.currentStep - 1}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>
      </Paper>

      <Grid container spacing={3}>
        {/* Left Column: Application Data */}
        <Grid item xs={12} md={8}>
          {/* Application Info */}
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography variant="h6" fontWeight="bold" gutterBottom>
              üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£
            </Typography>
            <Divider sx={{ mb: 2 }} />

            <Grid container spacing={2}>
              <Grid item xs={12} md={6}>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏≤‡∏£‡πå‡∏°
                </Typography>
                <Typography variant="body1" fontWeight="medium">
                  {application.farmInfo?.name}
                </Typography>
              </Grid>
              <Grid item xs={12} md={6}>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  ‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
                </Typography>
                <Typography variant="body1" fontWeight="medium">
                  {application.farmInfo?.size} ‡πÑ‡∏£‡πà
                </Typography>
              </Grid>
              <Grid item xs={12} md={6}>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
                </Typography>
                <Typography variant="body1" fontWeight="medium">
                  {application.farmerInfo?.name}
                </Typography>
              </Grid>
              <Grid item xs={12} md={6}>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  ‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å
                </Typography>
                <Typography variant="body1" fontWeight="medium">
                  {application.farmInfo?.cropType}
                </Typography>
              </Grid>
              <Grid item xs={12}>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡πà‡∏ô‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£
                </Typography>
                <Typography variant="body1" fontWeight="medium">
                  {new Date(application.submittedAt).toLocaleDateString('th-TH', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                  })}
                </Typography>
              </Grid>
            </Grid>
          </Paper>

          {/* Document Review (Step 3) */}
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography variant="h6" fontWeight="bold" gutterBottom>
              üìã ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (Step 3)
            </Typography>
            <Divider sx={{ mb: 2 }} />

            {reviewData ? (
              <Box>
                <Grid container spacing={2} sx={{ mb: 2 }}>
                  <Grid item xs={12} md={4}>
                    <Card variant="outlined">
                      <CardContent>
                        <Typography variant="caption" color="text.secondary">
                          ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
                        </Typography>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <Rating value={reviewData.completeness || 0} readOnly size="small" />
                          <Typography variant="body2" fontWeight="bold">
                            {reviewData.completeness}/5
                          </Typography>
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>
                  <Grid item xs={12} md={4}>
                    <Card variant="outlined">
                      <CardContent>
                        <Typography variant="caption" color="text.secondary">
                          ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                        </Typography>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <Rating value={reviewData.accuracy || 0} readOnly size="small" />
                          <Typography variant="body2" fontWeight="bold">
                            {reviewData.accuracy}/5
                          </Typography>
                        </Box>
                      </CardContent>
                    </Card>
                  </Grid>
                  <Grid item xs={12} md={4}>
                    <Card variant="outlined">
                      <CardContent>
                        <Typography variant="caption" color="text.secondary">
                          ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
                        </Typography>
                        <Chip
                          label={reviewData.riskLevel || 'N/A'}
                          color={
                            reviewData.riskLevel === 'Low'
                              ? 'success'
                              : reviewData.riskLevel === 'Medium'
                                ? 'warning'
                                : 'error'
                          }
                          size="small"
                        />
                      </CardContent>
                    </Card>
                  </Grid>
                </Grid>

                {reviewData.comments && (
                  <Alert severity="info" icon={<InfoIcon />}>
                    <Typography variant="body2">
                      <strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:</strong> {reviewData.comments}
                    </Typography>
                  </Alert>
                )}
              </Box>
            ) : (
              <Alert severity="warning">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</Alert>
            )}
          </Paper>

          {/* Farm Inspection (Step 6) */}
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography variant="h6" fontWeight="bold" gutterBottom>
              üè≠ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ü‡∏≤‡∏£‡πå‡∏° (Step 6)
            </Typography>
            <Divider sx={{ mb: 2 }} />

            {inspectionData ? (
              <Box>
                {/* Inspection Type */}
                <Box sx={{ mb: 2 }}>
                  <Chip
                    label={
                      inspectionData.type === 'VDO_CALL' ? 'üìπ VDO Call' : 'üìç On-Site Inspection'
                    }
                    color={inspectionData.type === 'ON_SITE' ? 'primary' : 'secondary'}
                  />
                </Box>

                {/* Score Summary */}
                {inspectionData.type === 'ON_SITE' && (
                  <Box>
                    <Alert
                      severity={
                        inspectionPass === 'pass'
                          ? 'success'
                          : inspectionPass === 'conditional'
                            ? 'warning'
                            : 'error'
                      }
                      icon={<StarIcon />}
                      sx={{ mb: 3 }}
                    >
                      <Typography variant="h5" fontWeight="bold">
                        ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: {inspectionScore} / 100
                      </Typography>
                      <Typography variant="body2">
                        ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:{' '}
                        {inspectionPass === 'pass'
                          ? '‡∏ú‡πà‡∏≤‡∏ô (Pass) ‚úÖ'
                          : inspectionPass === 'conditional'
                            ? '‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç (Conditional) ‚ö†Ô∏è'
                            : '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô (Fail) ‚ùå'}
                      </Typography>
                    </Alert>

                    {/* 8 CCPs Scores */}
                    <Typography variant="body2" fontWeight="bold" gutterBottom>
                      ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ CCP:
                    </Typography>
                    <Grid container spacing={1}>
                      {inspectionData.ccps?.map((ccp: any) => (
                        <Grid item xs={12} md={6} key={ccp.id}>
                          <Accordion>
                            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                              <Box
                                sx={{
                                  display: 'flex',
                                  alignItems: 'center',
                                  gap: 1,
                                  width: '100%',
                                }}
                              >
                                <Typography variant="body2" sx={{ flexGrow: 1 }}>
                                  {ccp.name}
                                </Typography>
                                <Chip
                                  label={`${ccp.score}/${ccp.maxScore}`}
                                  color={
                                    ccp.score >= ccp.maxScore * 0.8
                                      ? 'success'
                                      : ccp.score >= ccp.maxScore * 0.6
                                        ? 'warning'
                                        : 'error'
                                  }
                                  size="small"
                                />
                              </Box>
                            </AccordionSummary>
                            <AccordionDetails>
                              <Typography variant="caption" color="text.secondary" paragraph>
                                {ccp.description}
                              </Typography>
                              {ccp.notes && (
                                <Alert severity="info" icon={<InfoIcon />}>
                                  <Typography variant="caption">
                                    <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {ccp.notes}
                                  </Typography>
                                </Alert>
                              )}
                              {ccp.photos && ccp.photos.length > 0 && (
                                <Box sx={{ mt: 1 }}>
                                  <Typography variant="caption" color="text.secondary">
                                    ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {ccp.photos.length} ‡∏£‡∏π‡∏õ
                                  </Typography>
                                </Box>
                              )}
                            </AccordionDetails>
                          </Accordion>
                        </Grid>
                      ))}
                    </Grid>

                    {/* Final Notes */}
                    {inspectionData.finalNotes && (
                      <Alert severity="info" icon={<InfoIcon />} sx={{ mt: 2 }}>
                        <Typography variant="body2">
                          <strong>‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•:</strong> {inspectionData.finalNotes}
                        </Typography>
                      </Alert>
                    )}
                  </Box>
                )}

                {/* VDO Call Only */}
                {inspectionData.type === 'VDO_CALL' && (
                  <Alert severity="info">
                    <Typography variant="body2">
                      ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ú‡πà‡∏≤‡∏ô VDO Call - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {inspectionScore}/100)
                    </Typography>
                  </Alert>
                )}
              </Box>
            ) : (
              <Alert severity="warning">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ü‡∏≤‡∏£‡πå‡∏°</Alert>
            )}
          </Paper>
        </Grid>

        {/* Right Column: Decision */}
        <Grid item xs={12} md={4}>
          {/* Recommendation */}
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography variant="h6" fontWeight="bold" gutterBottom>
              üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            </Typography>
            <Divider sx={{ mb: 2 }} />

            <Alert severity={recommendation.color as any} icon={<AssessmentIcon />}>
              <Typography variant="body2" fontWeight="bold">
                {recommendation.icon} {recommendation.text}
              </Typography>
              <Typography variant="caption">‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏ü‡∏≤‡∏£‡πå‡∏°: {inspectionScore}/100</Typography>
            </Alert>

            <Box sx={{ mt: 2 }}>
              <Typography variant="body2" fontWeight="bold" gutterBottom>
                ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô:
              </Typography>
              <List dense>
                <ListItem>
                  <ListItemIcon>
                    <CheckCircleIcon color="success" fontSize="small" />
                  </ListItemIcon>
                  <ListItemText
                    primary="‚â•80 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô = ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"
                    primaryTypographyProps={{ variant: 'caption' }}
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon>
                    <WarningIcon color="warning" fontSize="small" />
                  </ListItemIcon>
                  <ListItemText
                    primary="70-79 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô = ‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç"
                    primaryTypographyProps={{ variant: 'caption' }}
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon>
                    <CancelIcon color="error" fontSize="small" />
                  </ListItemIcon>
                  <ListItemText
                    primary="<70 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô = ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"
                    primaryTypographyProps={{ variant: 'caption' }}
                  />
                </ListItem>
              </List>
            </Box>
          </Paper>

          {/* Decision Form */}
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" fontWeight="bold" gutterBottom>
              ‚öñÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
            </Typography>
            <Divider sx={{ mb: 2 }} />

            <Box sx={{ mb: 3 }}>
              <Button
                fullWidth
                variant={decision === 'approve' ? 'contained' : 'outlined'}
                color="success"
                onClick={() => setDecision('approve')}
                sx={{ mb: 1, py: 1.5 }}
                startIcon={<CheckCircleIcon />}
              >
                ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (Approve)
              </Button>
              <Button
                fullWidth
                variant={decision === 'reject' ? 'contained' : 'outlined'}
                color="error"
                onClick={() => setDecision('reject')}
                sx={{ mb: 1, py: 1.5 }}
                startIcon={<CancelIcon />}
              >
                ‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò (Reject)
              </Button>
              <Button
                fullWidth
                variant={decision === 'info' ? 'contained' : 'outlined'}
                color="warning"
                onClick={() => setDecision('info')}
                sx={{ py: 1.5 }}
                startIcon={<InfoIcon />}
              >
                ‚ÑπÔ∏è ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°
              </Button>
            </Box>

            <TextField
              fullWidth
              multiline
              rows={6}
              label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ / ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"
              value={adminNotes}
              onChange={(e) => setAdminNotes(e.target.value)}
              placeholder="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à, ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥, ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."
              sx={{ mb: 2 }}
            />

            <Button
              fullWidth
              variant="contained"
              size="large"
              onClick={handleOpenConfirm}
              disabled={!decision}
              sx={{ py: 1.5 }}
            >
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
            </Button>
          </Paper>
        </Grid>
      </Grid>

      {/* Confirm Dialog */}
      <Dialog open={confirmDialog} onClose={handleCloseConfirm} maxWidth="sm" fullWidth>
        <DialogTitle>
          {decision === 'approve' && '‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'}
          {decision === 'reject' && '‚ùå ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'}
          {decision === 'info' && '‚ÑπÔ∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°'}
        </DialogTitle>
        <DialogContent>
          <Alert
            severity={
              decision === 'approve' ? 'success' : decision === 'reject' ? 'error' : 'warning'
            }
            sx={{ mb: 2 }}
          >
            <Typography variant="body2">
              {decision === 'approve' && '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á GACP ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£ (Step 8)'}
              {decision === 'reject' && '‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£'}
              {decision === 'info' && '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£'}
            </Typography>
          </Alert>

          <Typography variant="body2" paragraph>
            <strong>‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£:</strong> {application.applicationNumber}
          </Typography>
          <Typography variant="body2" paragraph>
            <strong>‡∏ü‡∏≤‡∏£‡πå‡∏°:</strong> {application.farmInfo?.name}
          </Typography>
          <Typography variant="body2" paragraph>
            <strong>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏ü‡∏≤‡∏£‡πå‡∏°:</strong> {inspectionScore}/100
          </Typography>
          {adminNotes && (
            <Typography variant="body2" paragraph>
              <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {adminNotes}
            </Typography>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseConfirm} disabled={submitting}>
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </Button>
          <Button
            variant="contained"
            color={decision === 'approve' ? 'success' : decision === 'reject' ? 'error' : 'warning'}
            onClick={handleSubmit}
            disabled={submitting}
          >
            {submitting ? <CircularProgress size={24} /> : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô'}
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
};

export default withAuth(AdminApprovalPage, ['ADMIN']);
