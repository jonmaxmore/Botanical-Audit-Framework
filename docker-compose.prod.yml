# GACP Platform - Optimized Production Deployment
# Monorepo Structure with 3 Portals + Backend + MongoDB

version: '3.8'

services:
  # ===========================
  # DATABASE SERVICES
  # ===========================
  
  mongodb:
    image: mongo:7.0-alpine
    container_name: gacp-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: gacp_production
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - gacp-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  redis:
    image: redis:7.2-alpine
    container_name: gacp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - gacp-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # ===========================
  # BACKEND API
  # ===========================
  
  gacp-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: gacp-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3004
      MONGODB_URI: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD}@mongodb:27017/gacp_production?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - backend_certificates:/app/certificates
    ports:
      - "3004:3004"
    networks:
      - gacp-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/api/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G

  # ===========================
  # FRONTEND PORTALS
  # ===========================
  
  farmer-portal:
    build:
      context: .
      dockerfile: apps/farmer-portal/Dockerfile
    container_name: gacp-farmer-portal
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      NEXT_PUBLIC_API_URL: ${FARMER_API_URL:-http://gacp-backend:3004}
      NEXT_PUBLIC_APP_NAME: "GACP Farmer Portal"
      NEXT_PUBLIC_VERSION: "1.0.0"
    ports:
      - "3001:3001"
    networks:
      - gacp-network
    depends_on:
      - gacp-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  admin-portal:
    build:
      context: .
      dockerfile: apps/admin-portal/Dockerfile
    container_name: gacp-admin-portal
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3002
      NEXT_PUBLIC_API_URL: ${ADMIN_API_URL:-http://gacp-backend:3004}
      NEXT_PUBLIC_APP_NAME: "GACP Admin Portal"
      NEXT_PUBLIC_VERSION: "1.0.0"
    ports:
      - "3002:3002"
    networks:
      - gacp-network
    depends_on:
      - gacp-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  certificate-portal:
    build:
      context: .
      dockerfile: apps/certificate-portal/Dockerfile
    container_name: gacp-certificate-portal
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3003
      NEXT_PUBLIC_API_URL: ${CERT_API_URL:-http://gacp-backend:3004}
      NEXT_PUBLIC_APP_NAME: "GACP Certificate Portal"
      NEXT_PUBLIC_VERSION: "1.0.0"
    ports:
      - "3003:3003"
    networks:
      - gacp-network
    depends_on:
      - gacp-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # ===========================
  # REVERSE PROXY (NGINX)
  # ===========================
  
  nginx:
    image: nginx:1.25-alpine
    container_name: gacp-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - gacp-network
    depends_on:
      - farmer-portal
      - admin-portal
      - certificate-portal
      - gacp-backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

# ===========================
# NETWORKS
# ===========================

networks:
  gacp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# ===========================
# VOLUMES
# ===========================

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  backend_certificates:
    driver: local
  nginx_logs:
    driver: local
