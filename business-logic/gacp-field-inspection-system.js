/**
 * üöó GACP Field Inspection System
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÅ‡∏ö‡∏ö VDO Call + ‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏£‡∏¥‡∏á
 *
 * ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
 * 1. ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ VDO Call ‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
 * 2. ‡∏ó‡∏≥ VDO Call ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
 * 3. ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * 4. ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏£‡∏¥‡∏á
 * 5. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
 */

const { EventEmitter } = require('events');

// ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GACP
const GACP_INSPECTION_CRITERIA = {
  // ‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
  AREA_MANAGEMENT: {
    code: 'area_management',
    name: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°',
    weight: 25,
    items: [
      {
        code: 'farm_cleanliness',
        name: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°',
        description: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å‡∏™‡∏∞‡∏≠‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏¢‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏õ‡∏ô‡πÄ‡∏õ‡∏∑‡πâ‡∏≠‡∏ô',
        weight: 8,
        checkMethod: 'visual',
      },
      {
        code: 'area_boundary',
        name: '‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà',
        description: '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô',
        weight: 7,
        checkMethod: 'visual',
      },
      {
        code: 'drainage_system',
        name: '‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥',
        description: '‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°',
        weight: 10,
        checkMethod: 'physical',
      },
    ],
  },

  // ‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•
  CULTIVATION_PRACTICE: {
    code: 'cultivation_practice',
    name: '‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•',
    weight: 30,
    items: [
      {
        code: 'plant_spacing',
        name: '‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Å‡∏±‡∏ç‡∏ä‡∏≤',
        description: '‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô',
        weight: 10,
        checkMethod: 'measurement',
      },
      {
        code: 'plant_health',
        name: '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Å‡∏±‡∏ç‡∏ä‡∏≤',
        description: '‡∏ï‡πâ‡∏ô‡∏Å‡∏±‡∏ç‡∏ä‡∏≤‡∏°‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä',
        weight: 15,
        checkMethod: 'visual',
      },
      {
        code: 'water_management',
        name: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥',
        description: '‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠',
        weight: 5,
        checkMethod: 'physical',
      },
    ],
  },

  // ‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πã‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ
  INPUT_MANAGEMENT: {
    code: 'input_management',
    name: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï',
    weight: 20,
    items: [
      {
        code: 'fertilizer_storage',
        name: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏õ‡∏∏‡πã‡∏¢',
        description: '‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏∏‡πã‡∏¢‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏ô‡πÄ‡∏õ‡∏∑‡πâ‡∏≠‡∏ô',
        weight: 8,
        checkMethod: 'physical',
      },
      {
        code: 'pesticide_storage',
        name: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏≤‡∏£‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä',
        description: '‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô',
        weight: 12,
        checkMethod: 'physical',
      },
    ],
  },

  // ‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  RECORD_KEEPING: {
    code: 'record_keeping',
    name: '‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    weight: 15,
    items: [
      {
        code: 'cultivation_log',
        name: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÅ‡∏•',
        description: '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠',
        weight: 8,
        checkMethod: 'document',
      },
      {
        code: 'input_usage_log',
        name: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï',
        description: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πã‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
        weight: 7,
        checkMethod: 'document',
      },
    ],
  },

  // ‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏õ‡∏•‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
  INFRASTRUCTURE: {
    code: 'infrastructure',
    name: '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏õ‡∏•‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á',
    weight: 10,
    items: [
      {
        code: 'storage_facility',
        name: '‡∏™‡∏¥‡πà‡∏á‡∏õ‡∏•‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï',
        description: '‡∏°‡∏µ‡πÇ‡∏£‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°',
        weight: 5,
        checkMethod: 'physical',
      },
      {
        code: 'equipment_condition',
        name: '‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£',
        description: '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏î‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ',
        weight: 5,
        checkMethod: 'visual',
      },
    ],
  },
};

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
const INSPECTION_TYPES = {
  VDO_CALL: {
    type: 'vdo_call',
    name: 'VDO Call',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠',
    duration: 30, // ‡∏ô‡∏≤‡∏ó‡∏µ
    canCheck: ['visual', 'document'],
    limitations: ['‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ', '‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì'],
  },
  ON_SITE: {
    type: 'on_site',
    name: '‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏£‡∏¥‡∏á',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á',
    duration: 120, // ‡∏ô‡∏≤‡∏ó‡∏µ
    canCheck: ['visual', 'physical', 'measurement', 'document'],
    limitations: ['‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô', '‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á'],
  },
};

class GACPFieldInspectionSystem extends EventEmitter {
  constructor(database = null) {
    super();
    this.db = database;
    this.criteria = GACP_INSPECTION_CRITERIA;
    this.inspectionTypes = INSPECTION_TYPES;
    this.passingScore = 80; // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ú‡πà‡∏≤‡∏ô 80%
    this.minVdoScore = 70; // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏à‡∏≤‡∏Å VDO Call ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
  }

  /**
   * ‡∏î‡∏∂‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  getInspectionCriteria() {
    return Object.values(this.criteria).map(category => ({
      code: category.code,
      name: category.name,
      weight: category.weight,
      items: category.items.map(item => ({
        code: item.code,
        name: item.name,
        description: item.description,
        weight: item.weight,
        checkMethod: item.checkMethod,
      })),
    }));
  }

  /**
   * ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ VDO Call
   */
  async scheduleVDOCall(applicationId, inspectorId, scheduledDateTime, meetingDetails = {}) {
    const inspection = {
      inspectionId: this.generateInspectionId(),
      applicationId,
      inspectorId,
      type: 'vdo_call',
      status: 'scheduled',
      scheduledDateTime,
      meetingDetails: {
        platform: meetingDetails.platform || 'Microsoft Teams',
        meetingId: meetingDetails.meetingId || this.generateMeetingId(),
        meetingUrl: meetingDetails.meetingUrl,
        password: meetingDetails.password,
        instructions:
          meetingDetails.instructions || '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
      },
      checklist: this.generateVDOChecklist(),
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    await this.saveInspection(inspection);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    await this.updateApplicationInspectionStatus(applicationId, 'vdo_scheduled', {
      inspectionId: inspection.inspectionId,
      scheduledDateTime,
      inspectorId,
    });

    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    this.emit('vdo_call_scheduled', {
      applicationId,
      inspectorId,
      scheduledDateTime,
      meetingDetails: inspection.meetingDetails,
      inspectionId: inspection.inspectionId,
    });

    return inspection;
  }

  /**
   * ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ VDO Call
   */
  async conductVDOCall(inspectionId, vdoResults) {
    const inspection = await this.getInspection(inspectionId);

    if (inspection.type !== 'vdo_call' || inspection.status !== 'scheduled') {
      throw new Error('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö VDO Call');
    }

    const {
      inspectorId,
      startedAt,
      completedAt,
      attendees,
      checklistResults,
      photos,
      videos,
      findings,
      technicalIssues,
      farmersCooperation,
    } = vdoResults;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    const score = this.calculateInspectionScore(checklistResults, 'vdo_call');

    // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const requiresOnSite = this.shouldRequireOnSiteInspection(score, checklistResults, findings);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    inspection.status = 'completed';
    inspection.results = {
      startedAt,
      completedAt,
      duration: completedAt && startedAt ? (completedAt - startedAt) / (1000 * 60) : 0, // ‡∏ô‡∏≤‡∏ó‡∏µ
      attendees,
      checklistResults,
      score,
      photos,
      videos,
      findings,
      technicalIssues,
      farmersCooperation,
      requiresOnSite,
      inspector: inspectorId,
    };
    inspection.updatedAt = new Date();

    await this.saveInspection(inspection);

    if (requiresOnSite) {
      // ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      await this.updateApplicationInspectionStatus(inspection.applicationId, 'requires_onsite', {
        vdoScore: score,
        vdoInspectionId: inspectionId,
        reason: 'VDO Call ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
      });

      this.emit('onsite_inspection_required', {
        applicationId: inspection.applicationId,
        vdoInspectionId: inspectionId,
        vdoScore: score,
        reason: requiresOnSite.reason,
      });
    } else if (score >= this.passingScore) {
      // ‡∏ú‡πà‡∏≤‡∏ô VDO Call ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      await this.completeInspection(inspection.applicationId, {
        finalScore: score,
        method: 'vdo_call_only',
        passed: true,
        inspectionId,
      });
    } else {
      // ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå
      await this.completeInspection(inspection.applicationId, {
        finalScore: score,
        method: 'vdo_call_only',
        passed: false,
        inspectionId,
        reason: '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
      });
    }

    return inspection;
  }

  /**
   * ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏£‡∏¥‡∏á
   */
  async scheduleOnSiteInspection(
    applicationId,
    inspectorId,
    scheduledDateTime,
    appointmentDetails = {},
  ) {
    const inspection = {
      inspectionId: this.generateInspectionId(),
      applicationId,
      inspectorId,
      type: 'on_site',
      status: 'scheduled',
      scheduledDateTime,
      appointmentDetails: {
        location: appointmentDetails.location,
        contactPerson: appointmentDetails.contactPerson,
        contactPhone: appointmentDetails.contactPhone,
        estimatedDuration: appointmentDetails.estimatedDuration || 120, // ‡∏ô‡∏≤‡∏ó‡∏µ
        specialInstructions: appointmentDetails.specialInstructions,
        equipmentNeeded: appointmentDetails.equipmentNeeded || [],
      },
      checklist: this.generateOnSiteChecklist(),
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    await this.saveInspection(inspection);

    await this.updateApplicationInspectionStatus(applicationId, 'onsite_scheduled', {
      inspectionId: inspection.inspectionId,
      scheduledDateTime,
      inspectorId,
    });

    this.emit('onsite_inspection_scheduled', {
      applicationId,
      inspectorId,
      scheduledDateTime,
      appointmentDetails: inspection.appointmentDetails,
      inspectionId: inspection.inspectionId,
    });

    return inspection;
  }

  /**
   * ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á
   */
  async conductOnSiteInspection(inspectionId, onSiteResults) {
    const inspection = await this.getInspection(inspectionId);

    if (inspection.type !== 'on_site' || inspection.status !== 'scheduled') {
      throw new Error('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà');
    }

    const {
      inspectorId,
      startedAt,
      completedAt,
      checklistResults,
      measurements,
      photos,
      samples,
      findings,
      recommendations,
      farmersPresent,
      weatherConditions,
    } = onSiteResults;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    const score = this.calculateInspectionScore(checklistResults, 'on_site');

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    inspection.status = 'completed';
    inspection.results = {
      startedAt,
      completedAt,
      duration: completedAt && startedAt ? (completedAt - startedAt) / (1000 * 60) : 0,
      checklistResults,
      score,
      measurements,
      photos,
      samples,
      findings,
      recommendations,
      farmersPresent,
      weatherConditions,
      inspector: inspectorId,
    };
    inspection.updatedAt = new Date();

    await this.saveInspection(inspection);

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    await this.completeInspection(inspection.applicationId, {
      finalScore: score,
      method: 'on_site',
      passed: score >= this.passingScore,
      inspectionId,
      reason: score < this.passingScore ? '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î' : null,
    });

    return inspection;
  }

  /**
   * ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  async completeInspection(applicationId, finalResults) {
    const application = await this.getApplication(applicationId);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    application.inspection = application.inspection || {};
    application.inspection.status = 'completed';
    application.inspection.completedAt = new Date();
    application.inspection.finalScore = finalResults.finalScore;
    application.inspection.passed = finalResults.passed;
    application.inspection.method = finalResults.method;
    application.inspection.inspectionId = finalResults.inspectionId;
    application.inspection.reason = finalResults.reason;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    application.history = application.history || [];
    application.history.push({
      action: finalResults.passed ? 'INSPECTION_PASSED' : 'INSPECTION_FAILED',
      timestamp: new Date(),
      actor: 'INSPECTOR',
      note: `‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${finalResults.finalScore}% (${finalResults.method})`,
      details: finalResults,
    });

    await this.saveApplication(application);

    // ‡∏™‡πà‡∏á event
    this.emit('inspection_completed', {
      applicationId,
      passed: finalResults.passed,
      score: finalResults.finalScore,
      method: finalResults.method,
      inspectionId: finalResults.inspectionId,
    });

    return application;
  }

  /**
   * ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  shouldRequireOnSiteInspection(vdoScore, checklistResults, findings) {
    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    if (vdoScore < this.minVdoScore) {
      return {
        required: true,
        reason: `‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô VDO Call (${vdoScore}%) ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå (${this.minVdoScore}%)`,
      };
    }

    // ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const criticalIssues = this.findCriticalIssues(checklistResults);
    if (criticalIssues.length > 0) {
      return {
        required: true,
        reason: `‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ${criticalIssues.join(', ')}`,
      };
    }

    // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const requiresPhysicalCheck = findings.some(
      finding => finding.requiresPhysicalInspection === true,
    );

    if (requiresPhysicalCheck) {
      return {
        required: true,
        reason: '‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û',
      };
    }

    return { required: false };
  }

  /**
   * ‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
   */
  findCriticalIssues(checklistResults) {
    const critical = [];

    Object.values(checklistResults || {}).forEach(category => {
      category.items.forEach(item => {
        // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        if (item.weight >= 10 && (!item.passed || item.score < 70)) {
          critical.push(item.name);
        }
      });
    });

    return critical;
  }

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   */
  calculateInspectionScore(checklistResults, inspectionType) {
    let totalWeight = 0;
    let earnedScore = 0;

    Object.values(checklistResults || {}).forEach(category => {
      category.items.forEach(item => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const canCheck = this.inspectionTypes[inspectionType.toUpperCase()]?.canCheck || [];
        if (canCheck.includes(item.checkMethod)) {
          totalWeight += item.weight;
          earnedScore += item.score || 0;
        }
      });
    });

    return totalWeight > 0 ? Math.round((earnedScore / totalWeight) * 100) : 0;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á checklist ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö VDO Call
   */
  generateVDOChecklist() {
    const checklist = {};

    Object.entries(this.criteria).forEach(([categoryKey, category]) => {
      checklist[categoryKey] = {
        category: category.name,
        items: category.items
          .filter(item => ['visual', 'document'].includes(item.checkMethod))
          .map(item => ({
            ...item,
            checked: false,
            score: 0,
            notes: '',
            photos: [],
          })),
      };
    });

    return checklist;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á checklist ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
   */
  generateOnSiteChecklist() {
    const checklist = {};

    Object.entries(this.criteria).forEach(([categoryKey, category]) => {
      checklist[categoryKey] = {
        category: category.name,
        items: category.items.map(item => ({
          ...item,
          checked: false,
          score: 0,
          notes: '',
          photos: [],
          measurements: item.checkMethod === 'measurement' ? {} : null,
        })),
      };
    });

    return checklist;
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   */
  async getInspectionStatistics() {
    const stats = {
      total: 0,
      byType: {
        vdo_only: 0,
        onsite_only: 0,
        vdo_plus_onsite: 0,
      },
      averageScores: {
        vdo: 0,
        onsite: 0,
        combined: 0,
      },
      passRates: {
        vdo: 0,
        onsite: 0,
        overall: 0,
      },
      commonIssues: {},
      inspectionDuration: {
        vdo: 0,
        onsite: 0,
      },
    };

    // TODO: Implement actual statistics from database
    return stats;
  }

  // ==================== Helper Methods ====================

  generateInspectionId() {
    const timestamp = Date.now().toString(36);
    const random = Math.random().toString(36).substring(2, 8);
    return `insp_${timestamp}_${random}`;
  }

  generateMeetingId() {
    return Math.random().toString(36).substring(2, 12).toUpperCase();
  }

  async getInspection(inspectionId) {
    // TODO: Implement database query
    throw new Error(`Inspection ${inspectionId} not found - Database integration needed`);
  }

  async saveInspection(inspection) {
    // TODO: Implement database save
    return inspection;
  }

  async getApplication(applicationId) {
    // TODO: Implement database query
    throw new Error(`Application ${applicationId} not found - Database integration needed`);
  }

  async saveApplication(application) {
    // TODO: Implement database save
    return application;
  }

  async updateApplicationInspectionStatus(applicationId, status, details = {}) {
    const application = await this.getApplication(applicationId);
    application.inspection = application.inspection || {};
    application.inspection.status = status;
    application.inspection.details = { ...application.inspection.details, ...details };
    application.inspection.updatedAt = new Date();
    return await this.saveApplication(application);
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   */
  generateInspectionReport(inspections) {
    if (!Array.isArray(inspections)) {
      inspections = [inspections];
    }

    const report = {
      applicationId: inspections[0]?.applicationId,
      totalInspections: inspections.length,
      inspectionMethods: [],
      finalScore: 0,
      passed: false,
      summary: {
        strengths: [],
        weaknesses: [],
        recommendations: [],
      },
      timeline: [],
    };

    inspections.forEach(inspection => {
      report.inspectionMethods.push({
        type: inspection.type,
        date: inspection.scheduledDateTime,
        score: inspection.results?.score || 0,
        duration: inspection.results?.duration || 0,
      });

      report.timeline.push({
        action: `${inspection.type}_completed`,
        date: inspection.results?.completedAt || inspection.updatedAt,
        score: inspection.results?.score || 0,
      });
    });

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á VDO ‡πÅ‡∏•‡∏∞ On-site ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
    const scores = inspections.map(i => i.results?.score || 0);
    report.finalScore = Math.max(...scores);
    report.passed = report.finalScore >= this.passingScore;

    return report;
  }
}

// Export
module.exports = {
  GACPFieldInspectionSystem,
  GACP_INSPECTION_CRITERIA,
  INSPECTION_TYPES,
};
