#!/usr/bin/env node

/**
 * GACP Platform API Demo Script
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö GACP Platform
 *
 * ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: node gacp-demo.js
 */

const https = require('https');
const http = require('http');

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ API Base URL
const API_BASE = 'http://localhost:3004';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥ HTTP Request
function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const url = new URL(API_BASE + path);
    const options = {
      hostname: url.hostname,
      port: url.port || 80,
      path: url.pathname + url.search,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'GACP-Demo-Script/1.0',
      },
    };

    if (data) {
      const postData = JSON.stringify(data);
      options.headers['Content-Length'] = Buffer.byteLength(postData);
    }

    const req = http.request(options, res => {
      let body = '';

      res.on('data', chunk => {
        body += chunk;
      });

      res.on('end', () => {
        try {
          const jsonData = JSON.parse(body);
          resolve({
            status: res.statusCode,
            headers: res.headers,
            data: jsonData,
          });
        } catch (e) {
          resolve({
            status: res.statusCode,
            headers: res.headers,
            data: body,
          });
        }
      });
    });

    req.on('error', err => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
function displayResult(title, result) {
  console.log(`\nüîç ${title}`);
  console.log('='.repeat(50));
  console.log(`Status: ${result.status}`);
  console.log('Response:');
  console.log(JSON.stringify(result.data, null, 2));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πÇ‡∏°‡πà
async function runDemo() {
  console.log('üåü GACP Platform API Demo');
  console.log('='.repeat(60));
  console.log('‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô Good Agricultural and Collection Practices');
  console.log('‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡πÑ‡∏ó‡∏¢ - ‡∏Å‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÅ‡∏ú‡∏ô‡πÑ‡∏ó‡∏¢‡∏Ø (DTAM)');
  console.log('='.repeat(60));

  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
    console.log('\nüè• ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö');
    const healthCheck = await makeRequest('/health');
    displayResult('Health Check', healthCheck);

    await sleep(1000);

    // 2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö API
    console.log('\nüìä ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API Documentation');
    const apiInfo = await makeRequest('/api');
    displayResult('API Information', apiInfo);

    await sleep(1000);

    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Authentication Endpoint
    console.log('\nüîê ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô');
    const authTest = await makeRequest('/api/auth/health');
    displayResult('Authentication Health Check', authTest);

    await sleep(1000);

    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Dashboard Endpoint
    console.log('\nüìà ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Dashboard');
    const dashboardTest = await makeRequest('/api/dashboard');
    displayResult('Dashboard Test', dashboardTest);

    await sleep(1000);

    // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Compliance Endpoint
    console.log('\nüìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô');
    const complianceTest = await makeRequest('/api/compliance');
    displayResult('Compliance Test', complianceTest);

    await sleep(1000);

    // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Survey Endpoint
    console.log('\nüìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à');
    const surveyTest = await makeRequest('/api/survey/health');
    displayResult('Survey System Test', surveyTest);

    await sleep(1000);

    // 7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Login (Mock)
    console.log('\nüîë ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 7: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
    const loginData = {
      username: 'farmer@example.com',
      password: 'demo123',
    };
    const loginTest = await makeRequest('/api/auth/login', 'POST', loginData);
    displayResult('Login Test (Mock)', loginTest);

    await sleep(1000);

    // 8. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (Mock)
    console.log('\nüìÑ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 8: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡πà‡∏ô‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£');
    const applicationData = {
      applicantName: '‡∏ô‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö',
      farmName: '‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö GACP',
      farmLocation: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
      herbs: ['‡∏Ç‡∏°‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏ô', '‡∏Ç‡∏¥‡∏á'],
      farmSize: '10 ‡πÑ‡∏£‡πà',
    };
    const applicationTest = await makeRequest('/api/applications', 'POST', applicationData);
    displayResult('Application Submission Test', applicationTest);

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πÇ‡∏°‡πà
    console.log('\n' + '='.repeat(60));
    console.log('üéâ ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πÇ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('='.repeat(60));
    console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    console.log('‚úÖ API Documentation: ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
    console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö Dashboard: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
    console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
    console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
    console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå');
    console.log('');
    console.log('üåü ‡∏£‡∏∞‡∏ö‡∏ö GACP Platform ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!');
    console.log('üìû ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: http://localhost:3004/api');
  } catch (error) {
    console.error('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πÇ‡∏°‡πà:', error.message);
    console.log('\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    console.log('1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà port 3004');
    console.log('2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: node server.js');
    console.log('3. ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 10-15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ');
    console.log('4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡πÇ‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á: node gacp-demo.js');
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡πÇ‡∏°‡πà
if (require.main === module) {
  runDemo();
}

module.exports = { runDemo, makeRequest };
