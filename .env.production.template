# ==============================================================================
# GACP PLATFORM - PRODUCTION ENVIRONMENT VARIABLES
# ==============================================================================
# This file contains all environment variables needed for production deployment
# IMPORTANT: Copy this file to .env.production and fill in actual values
# DO NOT commit .env.production to version control
# ==============================================================================

# ==============================================================================
# APPLICATION ENVIRONMENT
# ==============================================================================
NODE_ENV=production
LOG_LEVEL=info

# ==============================================================================
# DOMAIN CONFIGURATION
# ==============================================================================
# Main domain for the application (used by Nginx for SSL and routing)
DOMAIN=yourdomain.com

# Portal URLs (for frontend API connections)
FARMER_API_URL=https://api.yourdomain.com
ADMIN_API_URL=https://api.yourdomain.com
CERT_API_URL=https://api.yourdomain.com

# Allowed CORS origins (comma-separated)
ALLOWED_ORIGINS=https://farmer.yourdomain.com,https://admin.yourdomain.com,https://cert.yourdomain.com

# ==============================================================================
# DATABASE CONFIGURATION (MongoDB)
# ==============================================================================
# MongoDB root credentials
MONGO_ROOT_USER=admin
MONGO_ROOT_PASSWORD=CHANGE_ME_STRONG_PASSWORD_HERE_MIN_32_CHARS

# MongoDB connection string (used by backend)
# Format: mongodb://username:password@host:port/database?authSource=admin
MONGODB_URI=mongodb://admin:CHANGE_ME_STRONG_PASSWORD_HERE_MIN_32_CHARS@mongodb:27017/gacp_production?authSource=admin

# ==============================================================================
# REDIS CONFIGURATION
# ==============================================================================
# Redis password for cache and session storage
REDIS_PASSWORD=CHANGE_ME_REDIS_PASSWORD_MIN_32_CHARS

# Redis connection URL (used by backend)
REDIS_URL=redis://:CHANGE_ME_REDIS_PASSWORD_MIN_32_CHARS@redis:6379

# ==============================================================================
# JWT AUTHENTICATION SECRETS
# ==============================================================================
# Generate strong random strings using:
# PowerShell: [Convert]::ToBase64String((1..64 | ForEach-Object { Get-Random -Minimum 0 -Maximum 256 }))
# Linux: openssl rand -base64 64

# JWT access token secret (min 64 characters)
JWT_SECRET=CHANGE_ME_JWT_SECRET_MIN_64_CHARS_USE_RANDOM_BASE64_STRING

# JWT refresh token secret (min 64 characters, MUST be different from JWT_SECRET)
JWT_REFRESH_SECRET=CHANGE_ME_JWT_REFRESH_SECRET_MIN_64_CHARS_DIFFERENT_FROM_JWT_SECRET

# ==============================================================================
# EMAIL CONFIGURATION (for notifications and password resets)
# ==============================================================================
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-specific-password
EMAIL_FROM="GACP Platform <noreply@yourdomain.com>"

# ==============================================================================
# FILE UPLOAD CONFIGURATION
# ==============================================================================
# Maximum file upload size (in bytes, default: 50MB)
MAX_UPLOAD_SIZE=52428800

# Upload directory (container path)
UPLOAD_DIR=/app/uploads

# ==============================================================================
# SSL/TLS CONFIGURATION (Let's Encrypt)
# ==============================================================================
# Email for Let's Encrypt certificate notifications
LETSENCRYPT_EMAIL=admin@yourdomain.com

# ==============================================================================
# BACKUP CONFIGURATION
# ==============================================================================
# AWS S3 credentials for automated backups (optional)
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_REGION=ap-southeast-1
S3_BACKUP_BUCKET=gacp-backups

# Backup retention (days)
BACKUP_RETENTION_DAYS=30

# ==============================================================================
# MONITORING & ALERTING (optional)
# ==============================================================================
# Slack webhook for deployment notifications
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL

# Sentry DSN for error tracking (optional)
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# ==============================================================================
# RATE LIMITING
# ==============================================================================
# API rate limit (requests per minute per IP)
RATE_LIMIT_WINDOW_MS=60000
RATE_LIMIT_MAX_REQUESTS=100

# ==============================================================================
# SESSION CONFIGURATION
# ==============================================================================
# Session secret (min 64 characters)
SESSION_SECRET=CHANGE_ME_SESSION_SECRET_MIN_64_CHARS_USE_RANDOM_BASE64_STRING

# Session timeout (milliseconds, default: 24 hours)
SESSION_TIMEOUT=86400000

# ==============================================================================
# FEATURE FLAGS
# ==============================================================================
# Enable/disable features in production
ENABLE_REGISTRATION=true
ENABLE_EMAIL_VERIFICATION=true
ENABLE_TWO_FACTOR_AUTH=false
ENABLE_AUDIT_LOGGING=true

# ==============================================================================
# PERFORMANCE TUNING
# ==============================================================================
# Node.js memory limit (MB)
NODE_OPTIONS=--max-old-space-size=2048

# Database connection pool size
DB_POOL_SIZE=10

# Redis max connections
REDIS_MAX_CONNECTIONS=50

# ==============================================================================
# SECURITY HEADERS
# ==============================================================================
# Content Security Policy
CSP_POLICY="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';"

# ==============================================================================
# LOGGING
# ==============================================================================
# Log level: error | warn | info | debug
LOG_LEVEL=info

# Log format: json | text
LOG_FORMAT=json

# Log to file (in addition to stdout)
LOG_TO_FILE=true

# ==============================================================================
# QUICK SETUP COMMANDS
# ==============================================================================
# PowerShell commands to generate secure secrets:
#
# 1. MongoDB Password:
#    [System.Web.Security.Membership]::GeneratePassword(32, 10)
#
# 2. Redis Password:
#    [System.Web.Security.Membership]::GeneratePassword(32, 10)
#
# 3. JWT Secrets (run twice for access + refresh):
#    [Convert]::ToBase64String((1..64 | ForEach-Object { Get-Random -Minimum 0 -Maximum 256 }))
#
# 4. Session Secret:
#    [Convert]::ToBase64String((1..64 | ForEach-Object { Get-Random -Minimum 0 -Maximum 256 }))
#
# Linux/macOS commands:
#    openssl rand -base64 64
#
# ==============================================================================
# DEPLOYMENT CHECKLIST
# ==============================================================================
# Before deploying to production:
# ✓ 1. Copy this file to .env.production
# ✓ 2. Replace ALL "CHANGE_ME_" values with actual secrets
# ✓ 3. Update DOMAIN to your actual domain
# ✓ 4. Configure DNS records for subdomains (farmer, admin, cert, api)
# ✓ 5. Update SMTP settings for email functionality
# ✓ 6. Set up S3 bucket for backups (if using AWS backup)
# ✓ 7. Verify SSL certificates in nginx/ssl/ directory
# ✓ 8. Test connection to MongoDB and Redis
# ✓ 9. Run: docker-compose -f docker-compose.prod.yml config (validate)
# ✓ 10. Run: docker-compose -f docker-compose.prod.yml up -d (deploy)
# ==============================================================================
