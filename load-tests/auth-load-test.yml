# Authentication Service Load Test
# Tests authentication endpoints with realistic user behavior
# Target: <100ms p95 latency, >1000 RPS throughput

config:
  target: "http://localhost:3004"
  phases:
    # Warm-up phase: 10 users for 30 seconds
    - duration: 30
      arrivalRate: 10
      name: "Warm-up"
    
    # Ramp-up phase: Gradually increase to 50 users over 1 minute
    - duration: 60
      arrivalRate: 10
      rampTo: 50
      name: "Ramp-up"
    
    # Sustained load: 100 users for 2 minutes
    - duration: 120
      arrivalRate: 100
      name: "Sustained load"
    
    # Peak load: 200 users for 1 minute
    - duration: 60
      arrivalRate: 200
      name: "Peak load"
    
    # Cool-down: Decrease to 20 users over 30 seconds
    - duration: 30
      arrivalRate: 100
      rampTo: 20
      name: "Cool-down"
  
  # Payload definitions
  payload:
    path: "./test-users.csv"
    fields:
      - "email"
      - "password"
    skipHeader: true
  
  # Default request settings
  http:
    timeout: 10
  
  # Plugins
  plugins:
    expect: {}
    metrics-by-endpoint:
      stripQueryString: true
  
  # Environment variables
  variables:
    testUser:
      email: "loadtest@gacp.dtam.go.th"
      password: "LoadTest123456!"
    adminUser:
      email: "admin@gacp.dtam.go.th"
      password: "AdminTest123456!"
  
  # Performance thresholds
  ensure:
    maxErrorRate: 1 # Max 1% error rate
    p95: 100 # 95th percentile response time < 100ms
    p99: 200 # 99th percentile response time < 200ms

# Test scenarios
scenarios:
  # Scenario 1: User Login Flow (60% of traffic)
  - name: "User Login"
    weight: 60
    flow:
      # Login endpoint (POST /api/auth/login)
      - post:
          url: "/api/auth/login"
          json:
            email: "{{ testUser.email }}"
            password: "{{ testUser.password }}"
          capture:
            - json: "$.data.accessToken"
              as: "accessToken"
            - json: "$.data.refreshToken"
              as: "refreshToken"
          expect:
            - statusCode: 200
            - contentType: json
            - hasProperty: "data.accessToken"
      
      # Get user profile (GET /api/auth/profile)
      - get:
          url: "/api/auth/profile"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          expect:
            - statusCode: 200
            - hasProperty: "data.user"
      
      # Think time: User reads profile (1-3 seconds)
      - think: 2
      
      # Logout (POST /api/auth/logout)
      - post:
          url: "/api/auth/logout"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          expect:
            - statusCode: 200
  
  # Scenario 2: Token Refresh Flow (25% of traffic)
  - name: "Token Refresh"
    weight: 25
    flow:
      # Login first
      - post:
          url: "/api/auth/login"
          json:
            email: "{{ testUser.email }}"
            password: "{{ testUser.password }}"
          capture:
            - json: "$.data.accessToken"
              as: "accessToken"
            - json: "$.data.refreshToken"
              as: "refreshToken"
          expect:
            - statusCode: 200
      
      # Wait before refreshing
      - think: 5
      
      # Refresh token (POST /api/auth/refresh)
      - post:
          url: "/api/auth/refresh"
          json:
            refreshToken: "{{ refreshToken }}"
          capture:
            - json: "$.data.accessToken"
              as: "newAccessToken"
          expect:
            - statusCode: 200
            - hasProperty: "data.accessToken"
      
      # Verify new token works
      - get:
          url: "/api/auth/profile"
          headers:
            Authorization: "Bearer {{ newAccessToken }}"
          expect:
            - statusCode: 200
  
  # Scenario 3: Failed Login Attempts (10% of traffic)
  - name: "Failed Login"
    weight: 10
    flow:
      # Attempt login with wrong password
      - post:
          url: "/api/auth/login"
          json:
            email: "{{ testUser.email }}"
            password: "WrongPassword123!"
          expect:
            - statusCode: 401
      
      # Wait before retry
      - think: 1
      
      # Successful login
      - post:
          url: "/api/auth/login"
          json:
            email: "{{ testUser.email }}"
            password: "{{ testUser.password }}"
          expect:
            - statusCode: 200
  
  # Scenario 4: Profile Update Flow (5% of traffic)
  - name: "Profile Update"
    weight: 5
    flow:
      # Login
      - post:
          url: "/api/auth/login"
          json:
            email: "{{ testUser.email }}"
            password: "{{ testUser.password }}"
          capture:
            - json: "$.data.accessToken"
              as: "accessToken"
          expect:
            - statusCode: 200
      
      # Get current profile
      - get:
          url: "/api/auth/profile"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          capture:
            - json: "$.data.user.firstName"
              as: "firstName"
          expect:
            - statusCode: 200
      
      # Update profile (PUT /api/auth/profile)
      - put:
          url: "/api/auth/profile"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          json:
            firstName: "{{ firstName }}"
            phoneNumber: "+66812345678"
          expect:
            - statusCode: 200
      
      # Verify update
      - get:
          url: "/api/auth/profile"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          expect:
            - statusCode: 200
            - hasProperty: "data.user.phoneNumber"

# Before/After hooks
before:
  flow:
    - log: "Starting authentication load test..."
    - log: "Target: {{ target }}"

after:
  flow:
    - log: "Load test completed"
