# Stress Test - Find System Breaking Point
# Gradually increases load until system fails or reaches threshold
# Target: Identify maximum sustainable load

config:
  target: "http://localhost:5000"
  phases:
    # Phase 1: Baseline - 10 RPS
    - duration: 60
      arrivalRate: 10
      name: "Baseline (10 RPS)"
    
    # Phase 2: 50 RPS
    - duration: 60
      arrivalRate: 50
      name: "Low load (50 RPS)"
    
    # Phase 3: 100 RPS
    - duration: 60
      arrivalRate: 100
      name: "Medium load (100 RPS)"
    
    # Phase 4: 200 RPS
    - duration: 60
      arrivalRate: 200
      name: "High load (200 RPS)"
    
    # Phase 5: 300 RPS
    - duration: 60
      arrivalRate: 300
      name: "Very high load (300 RPS)"
    
    # Phase 6: 500 RPS
    - duration: 60
      arrivalRate: 500
      name: "Extreme load (500 RPS)"
    
    # Phase 7: 1000 RPS (stress point)
    - duration: 60
      arrivalRate: 1000
      name: "Stress point (1000 RPS)"
  
  http:
    timeout: 30
  
  plugins:
    expect: {}
    metrics-by-endpoint: {}
  
  variables:
    testUser:
      email: "loadtest@gacp.dtam.go.th"
      password: "LoadTest123456!"

scenarios:
  # Mix of all endpoint types
  - name: "Mixed Load"
    flow:
      # Login (20% - authentication heavy)
      - post:
          url: "/api/auth/login"
          json:
            email: "{{ testUser.email }}"
            password: "{{ testUser.password }}"
          capture:
            - json: "$.data.accessToken"
              as: "token"
          weight: 20
      
      # List farmers (30% - database reads)
      - get:
          url: "/api/farmers"
          headers:
            Authorization: "Bearer {{ token }}"
          qs:
            page: "{{ $randomNumber(1, 10) }}"
            limit: 20
          weight: 30
      
      # Certificate verification (30% - public endpoint)
      - get:
          url: "/api/certificates/qr/{{ $randomString() }}"
          weight: 30
      
      # Get profile (20% - authenticated reads)
      - get:
          url: "/api/auth/profile"
          headers:
            Authorization: "Bearer {{ token }}"
          weight: 20

before:
  flow:
    - log: "==================================="
    - log: "Starting STRESS TEST"
    - log: "This will gradually increase load"
    - log: "Monitor system resources closely"
    - log: "==================================="

after:
  flow:
    - log: "==================================="
    - log: "Stress test completed"
    - log: "Analyze results to find limits"
    - log: "==================================="
