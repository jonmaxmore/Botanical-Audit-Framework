'use client';

import { useState } from 'react';
import Link from 'next/link';

export default function NewApplicationPage() {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    farm: '',
    crop: '',
    area: '',
    documents: [] as string[],
  });

  const crops = ['‡∏Å‡∏±‡∏ç‡∏ä‡∏≤', '‡∏Ç‡∏°‡∏¥‡πâ‡∏ô', '‡∏Ç‡∏¥‡∏á', '‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢', '‡πÑ‡∏û‡∏•', '‡∏Å‡∏£‡∏∞‡∏ó‡πà‡∏≠‡∏°'];

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-4xl mx-auto">
        <Link href="/applications" className="text-green-600 hover:underline mb-4 inline-block">‚Üê ‡∏Å‡∏•‡∏±‡∏ö</Link>
        
        <div className="bg-white rounded-lg shadow p-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">üìù ‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á GACP</h1>
          <p className="text-gray-600 mb-8">‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á</p>

          {/* Progress */}
          <div className="flex items-center justify-between mb-8">
            {[1, 2, 3, 4].map((s) => (
              <div key={s} className="flex items-center">
                <div className={`w-10 h-10 rounded-full flex items-center justify-center font-bold ${
                  step >= s ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-600'
                }`}>
                  {s}
                </div>
                {s < 4 && <div className={`w-24 h-1 ${step > s ? 'bg-green-600' : 'bg-gray-200'}`} />}
              </div>
            ))}
          </div>

          {/* Step 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏≤‡∏£‡πå‡∏° */}
          {step === 1 && (
            <div>
              <h2 className="text-xl font-bold mb-4">Step 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏≤‡∏£‡πå‡∏°</h2>
              <div className="space-y-3">
                <label className="flex items-center p-4 border-2 rounded-lg cursor-pointer hover:border-green-500">
                  <input type="radio" name="farm" className="mr-3" onChange={() => setFormData({...formData, farm: '‡∏™‡∏∏‡∏Ç‡πÉ‡∏à'})} />
                  <div>
                    <div className="font-semibold">‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏™‡∏∏‡∏Ç‡πÉ‡∏à</div>
                    <div className="text-sm text-gray-600">‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà ‚Ä¢ 5 ‡πÑ‡∏£‡πà</div>
                  </div>
                </label>
                <label className="flex items-center p-4 border-2 rounded-lg cursor-pointer hover:border-green-500">
                  <input type="radio" name="farm" className="mr-3" onChange={() => setFormData({...formData, farm: '‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'})} />
                  <div>
                    <div className="font-semibold">‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</div>
                    <div className="text-sm text-gray-600">‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢ ‚Ä¢ 10 ‡πÑ‡∏£‡πà</div>
                  </div>
                </label>
                <Link href="/farms" className="flex items-center justify-center p-4 border-2 border-dashed rounded-lg text-green-600 hover:border-green-500">
                  + ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÉ‡∏´‡∏°‡πà
                </Link>
              </div>
            </div>
          )}

          {/* Step 2: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡∏ä */}
          {step === 2 && (
            <div>
              <h2 className="text-xl font-bold mb-4">Step 2: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á</h2>
              <div className="grid grid-cols-3 gap-4 mb-4">
                {crops.map((crop) => (
                  <button
                    key={crop}
                    onClick={() => setFormData({...formData, crop})}
                    className={`p-4 border-2 rounded-lg font-semibold ${
                      formData.crop === crop ? 'border-green-600 bg-green-50 text-green-700' : 'border-gray-200 hover:border-green-500'
                    }`}
                  >
                    {crop}
                  </button>
                ))}
              </div>
              <div className="mt-6">
                <label className="block text-sm font-medium mb-2">‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å (‡πÑ‡∏£‡πà)</label>
                <input
                  type="number"
                  value={formData.area}
                  onChange={(e) => setFormData({...formData, area: e.target.value})}
                  className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô 5"
                />
              </div>
            </div>
          )}

          {/* Step 3: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ */}
          {step === 3 && (
            <div>
              <h2 className="text-xl font-bold mb-4">Step 3: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</h2>
              <div className="space-y-4">
                {['‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏•‡∏π‡∏Å', '‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏≤‡∏£‡πå‡∏°', '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å'].map((doc) => (
                  <div key={doc} className="border-2 border-dashed rounded-lg p-4">
                    <div className="flex justify-between items-center">
                      <span className="font-medium">{doc}</span>
                      <button className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 text-sm">
                        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Step 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö */}
          {step === 4 && (
            <div>
              <h2 className="text-xl font-bold mb-4">Step 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>
              <div className="bg-gray-50 p-6 rounded-lg space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-600">‡∏ü‡∏≤‡∏£‡πå‡∏°:</span>
                  <span className="font-semibold">‡∏ü‡∏≤‡∏£‡πå‡∏°{formData.farm}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">‡∏û‡∏∑‡∏ä:</span>
                  <span className="font-semibold">{formData.crop}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà:</span>
                  <span className="font-semibold">{formData.area} ‡πÑ‡∏£‡πà</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°:</span>
                  <span className="font-semibold text-green-600">30,000 ‡∏ö‡∏≤‡∏ó</span>
                </div>
              </div>
              <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                <p className="text-sm text-yellow-800">
                  üí° ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠ ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà 1 ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 15,000 ‡∏ö‡∏≤‡∏ó ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô
                </p>
              </div>
            </div>
          )}

          {/* Navigation */}
          <div className="flex justify-between mt-8">
            <button
              onClick={() => setStep(Math.max(1, step - 1))}
              disabled={step === 1}
              className="px-6 py-2 border rounded-lg disabled:opacity-50"
            >
              ‚Üê ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            </button>
            {step < 4 ? (
              <button
                onClick={() => setStep(step + 1)}
                className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
              >
                ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Üí
              </button>
            ) : (
              <button className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                ‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
