'use client';

import { useState } from 'react';

export default function NotificationsPage() {
  const [filter, setFilter] = useState('all');

  const notifications = [
    {
      id: 1,
      title: '‡∏Ñ‡∏≥‡∏Ç‡∏≠ #001 ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
      message: '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"',
      time: '2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß',
      read: false,
      type: 'status'
    },
    {
      id: 2,
      title: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£',
      message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠ #001',
      time: '5 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß',
      read: false,
      type: 'action'
    },
    {
      id: 3,
      title: '‡∏ô‡∏±‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà',
      message: '‡∏ô‡∏±‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 20/01 ‡πÄ‡∏ß‡∏•‡∏≤ 10:00 ‡∏ô.',
      time: '1 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß',
      read: true,
      type: 'schedule'
    },
    {
      id: 4,
      title: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      message: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà 1 ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 15,000 ‡∏ö‡∏≤‡∏ó ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      time: '2 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß',
      read: true,
      type: 'payment'
    },
    {
      id: 5,
      title: '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß',
      message: '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á GACP-003 ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ',
      time: '3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß',
      read: true,
      type: 'certificate'
    }
  ];

  const filteredNotifs = notifications.filter(n => {
    if (filter === 'unread') return !n.read;
    if (filter === 'read') return n.read;
    return true;
  });

  const unreadCount = notifications.filter(n => !n.read).length;

  const typeIcons: Record<string, string> = {
    status: 'üìã',
    action: '‚ö†Ô∏è',
    schedule: 'üìÖ',
    payment: 'üí∞',
    certificate: 'üèÜ'
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-4xl mx-auto">
        <div className="mb-6">
          <h1 className="text-3xl font-bold text-gray-900">üîî ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h1>
          <p className="text-gray-600 mt-1">‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
        </div>

        <div className="bg-white rounded-lg shadow mb-6 p-4">
          <div className="flex space-x-2">
            <button
              onClick={() => setFilter('all')}
              className={`px-4 py-2 rounded-lg ${filter === 'all' ? 'bg-green-600 text-white' : 'bg-gray-100'}`}
            >
              ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({notifications.length})
            </button>
            <button
              onClick={() => setFilter('unread')}
              className={`px-4 py-2 rounded-lg ${filter === 'unread' ? 'bg-green-600 text-white' : 'bg-gray-100'}`}
            >
              ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô ({unreadCount})
            </button>
            <button
              onClick={() => setFilter('read')}
              className={`px-4 py-2 rounded-lg ${filter === 'read' ? 'bg-green-600 text-white' : 'bg-gray-100'}`}
            >
              ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ({notifications.length - unreadCount})
            </button>
          </div>
        </div>

        <div className="space-y-3">
          {filteredNotifs.map(notif => (
            <div
              key={notif.id}
              className={`bg-white rounded-lg shadow p-4 hover:shadow-md transition ${
                !notif.read ? 'border-l-4 border-green-500' : ''
              }`}
            >
              <div className="flex items-start space-x-4">
                <div className="text-3xl">{typeIcons[notif.type]}</div>
                <div className="flex-1">
                  <div className="flex justify-between items-start mb-1">
                    <h3
                      className={`font-semibold ${!notif.read ? 'text-gray-900' : 'text-gray-600'}`}
                    >
                      {notif.title}
                    </h3>
                    {!notif.read && <span className="w-2 h-2 bg-green-500 rounded-full"></span>}
                  </div>
                  <p className="text-sm text-gray-600 mb-2">{notif.message}</p>
                  <div className="flex justify-between items-center">
                    <span className="text-xs text-gray-500">{notif.time}</span>
                    <div className="flex space-x-2">
                      {!notif.read && (
                        <button className="text-xs text-green-600 hover:underline">
                          ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                        </button>
                      )}
                      <button className="text-xs text-red-600 hover:underline">‡∏•‡∏ö</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {filteredNotifs.length === 0 && (
          <div className="text-center py-20 bg-white rounded-lg shadow">
            <div className="text-6xl mb-4">üîî</div>
            <h3 className="text-xl font-bold text-gray-900 mb-2">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h3>
            <p className="text-gray-600">‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</p>
          </div>
        )}
      </div>
    </div>
  );
}
