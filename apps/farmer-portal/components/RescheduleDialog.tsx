/**
 * GACP Platform - Reschedule Inspection Dialog Component
 *
 * Modal dialog for rescheduling farm inspections.
 * Features:
 * - Date picker with available slots
 * - Reschedule limit enforcement (1 time)
 * - Reason selection
 * - Confirmation flow
 *
 * @version 1.0.0
 * @created October 14, 2025
 */

'use client';

import { useState, useEffect } from 'react';
import { Calendar, Clock, AlertCircle, X, Check } from 'lucide-react';

// ============================================================================
// TYPE DEFINITIONS
// ============================================================================

export interface RescheduleDialogProps {
  /** Whether dialog is open */
  isOpen: boolean;

  /** Callback to close dialog */
  onClose: () => void;

  /** Application ID */
  applicationId: string;

  /** Current inspection details */
  currentInspection: {
    id: string;
    scheduledDate: Date;
    inspectorName: string;
  };

  /** Current reschedule count */
  rescheduleCount: number;

  /** Maximum reschedule allowed (default: 1) */
  maxReschedule?: number;

  /** Available dates for rescheduling */
  availableDates?: Date[];

  /** Callback when reschedule is confirmed */
  onConfirm: (data: RescheduleData) => Promise<void>;

  /** Loading state */
  isLoading?: boolean;
}

export interface RescheduleData {
  applicationId: string;
  inspectionId: string;
  newDate: Date;
  reason: string;
  notes?: string;
}

export type RescheduleReason = 'weather' | 'personal' | 'emergency' | 'technical' | 'other';

// ============================================================================
// HELPER FUNCTIONS
// ============================================================================

function formatThaiDate(date: Date): string {
  return date.toLocaleDateString('th-TH', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

function formatTime(date: Date): string {
  return date.toLocaleTimeString('th-TH', {
    hour: '2-digit',
    minute: '2-digit',
  });
}

function isDateAvailable(date: Date, availableDates?: Date[]): boolean {
  if (!availableDates || availableDates.length === 0) return true;

  const dateStr = date.toISOString().split('T')[0];
  return availableDates.some(
    availableDate => availableDate.toISOString().split('T')[0] === dateStr
  );
}

// ============================================================================
// COMPONENT
// ============================================================================

export function RescheduleDialog({
  isOpen,
  onClose,
  applicationId,
  currentInspection,
  rescheduleCount,
  maxReschedule = 1,
  availableDates,
  onConfirm,
  isLoading = false,
}: RescheduleDialogProps) {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [reason, setReason] = useState<RescheduleReason>('personal');
  const [notes, setNotes] = useState('');
  const [step, setStep] = useState<'select' | 'confirm' | 'success'>('select');
  const [error, setError] = useState<string | null>(null);

  // Reset on open
  useEffect(() => {
    if (isOpen) {
      setSelectedDate(null);
      setReason('personal');
      setNotes('');
      setStep('select');
      setError(null);
    }
  }, [isOpen]);

  // Check if reschedule is allowed
  const canReschedule = rescheduleCount < maxReschedule;
  const isLastReschedule = rescheduleCount === maxReschedule - 1;

  // Reason options
  const reasonOptions: { value: RescheduleReason; label: string; icon: string }[] = [
    { value: 'weather', label: '‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢', icon: 'üåßÔ∏è' },
    { value: 'personal', label: '‡∏ï‡∏¥‡∏î‡∏ò‡∏∏‡∏£‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß', icon: 'üë§' },
    { value: 'emergency', label: '‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô', icon: 'üö®' },
    { value: 'technical', label: '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ', icon: 'üîß' },
    { value: 'other', label: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ', icon: 'üìù' },
  ];

  // Handle confirm
  const handleConfirm = async () => {
    if (!selectedDate) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà');
      return;
    }

    if (!canReschedule) {
      setError('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }

    try {
      await onConfirm({
        applicationId,
        inspectionId: currentInspection.id,
        newDate: selectedDate,
        reason,
        notes: notes || undefined,
      });

      setStep('success');

      // Auto close after 2 seconds
      setTimeout(() => {
        onClose();
      }, 2000);
    } catch (err) {
      setError(err instanceof Error ? err.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
    }
  };

  // Don't render if not open
  if (!isOpen) return null;

  return (
    <>
      {/* Backdrop */}
      <div className="fixed inset-0 bg-black/50 z-40" onClick={onClose} />

      {/* Dialog */}
      <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b">
            <h2 className="text-2xl font-bold text-gray-900">‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</h2>
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700"
              disabled={isLoading}
            >
              <X className="w-6 h-6" />
            </button>
          </div>

          {/* Content */}
          <div className="p-6">
            {/* Cannot Reschedule Warning */}
            {!canReschedule && (
              <div className="mb-6 p-4 bg-red-50 border border-red-300 rounded-lg">
                <div className="flex items-start gap-3">
                  <AlertCircle className="w-6 h-6 text-red-600 flex-shrink-0" />
                  <div>
                    <p className="font-semibold text-red-900">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ</p>
                    <p className="text-sm text-red-800 mt-1">
                      ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö {maxReschedule} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß
                      ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Last Reschedule Warning */}
            {canReschedule && isLastReschedule && (
              <div className="mb-6 p-4 bg-yellow-50 border border-yellow-300 rounded-lg">
                <div className="flex items-start gap-3">
                  <AlertCircle className="w-6 h-6 text-yellow-600 flex-shrink-0" />
                  <div>
                    <p className="font-semibold text-yellow-900">
                      ‚ö†Ô∏è ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                    </p>
                    <p className="text-sm text-yellow-800 mt-1">
                      ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≤‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
                      ‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠‡πÉ‡∏´‡∏°‡πà
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Success State */}
            {step === 'success' && (
              <div className="text-center py-8">
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Check className="w-10 h-10 text-green-600" />
                </div>
                <h3 className="text-xl font-bold text-gray-900 mb-2">‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>
                <p className="text-gray-600">‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ...</p>
              </div>
            )}

            {/* Form State */}
            {step !== 'success' && canReschedule && (
              <>
                {/* Current Inspection Info */}
                <div className="mb-6 p-4 bg-gray-50 border border-gray-200 rounded-lg">
                  <h3 className="font-semibold text-gray-900 mb-3">‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    <div className="flex items-center gap-2">
                      <Calendar className="w-5 h-5 text-gray-600" />
                      <div>
                        <p className="text-sm text-gray-600">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</p>
                        <p className="font-medium">
                          {formatThaiDate(currentInspection.scheduledDate)}
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Clock className="w-5 h-5 text-gray-600" />
                      <div>
                        <p className="text-sm text-gray-600">‡πÄ‡∏ß‡∏•‡∏≤</p>
                        <p className="font-medium">{formatTime(currentInspection.scheduledDate)}</p>
                      </div>
                    </div>
                  </div>
                  <div className="mt-3 pt-3 border-t border-gray-300">
                    <p className="text-sm text-gray-600">
                      ‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: {currentInspection.inspectorName}
                    </p>
                  </div>
                </div>

                {/* Date Selection */}
                <div className="mb-6">
                  <label className="block text-sm font-semibold text-gray-900 mb-3">
                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà <span className="text-red-600">*</span>
                  </label>
                  <input
                    type="date"
                    value={selectedDate?.toISOString().split('T')[0] || ''}
                    onChange={e => {
                      const date = e.target.value ? new Date(e.target.value) : null;
                      setSelectedDate(date);
                      setError(null);
                    }}
                    min={new Date().toISOString().split('T')[0]}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    disabled={isLoading}
                  />
                  {selectedDate && (
                    <p className="mt-2 text-sm text-gray-600">
                      ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {formatThaiDate(selectedDate)}
                    </p>
                  )}
                </div>

                {/* Reason Selection */}
                <div className="mb-6">
                  <label className="block text-sm font-semibold text-gray-900 mb-3">
                    ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î <span className="text-red-600">*</span>
                  </label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {reasonOptions.map(option => (
                      <button
                        key={option.value}
                        onClick={() => setReason(option.value)}
                        className={`flex items-center gap-3 p-3 border-2 rounded-lg text-left transition-colors ${
                          reason === option.value
                            ? 'border-blue-600 bg-blue-50'
                            : 'border-gray-300 hover:border-gray-400'
                        }`}
                        disabled={isLoading}
                      >
                        <span className="text-2xl">{option.icon}</span>
                        <span className="text-sm font-medium">{option.label}</span>
                      </button>
                    ))}
                  </div>
                </div>

                {/* Notes */}
                <div className="mb-6">
                  <label className="block text-sm font-semibold text-gray-900 mb-3">
                    ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                  </label>
                  <textarea
                    value={notes}
                    onChange={e => setNotes(e.target.value)}
                    placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."
                    rows={3}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
                    disabled={isLoading}
                  />
                </div>

                {/* Error Message */}
                {error && (
                  <div className="mb-6 p-4 bg-red-50 border border-red-300 rounded-lg">
                    <p className="text-sm text-red-800">{error}</p>
                  </div>
                )}

                {/* Reschedule Counter */}
                <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                  <p className="text-sm text-blue-900">
                    <strong>‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</strong> {rescheduleCount} / {maxReschedule} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                    {isLastReschedule && ' (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)'}
                  </p>
                </div>
              </>
            )}
          </div>

          {/* Footer */}
          {step !== 'success' && canReschedule && (
            <div className="flex items-center justify-end gap-3 p-6 border-t bg-gray-50">
              <button
                onClick={onClose}
                className="px-6 py-2 border border-gray-300 rounded-lg font-semibold hover:bg-gray-100"
                disabled={isLoading}
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button
                onClick={handleConfirm}
                disabled={!selectedDate || isLoading}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
              >
                {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î'}
              </button>
            </div>
          )}

          {!canReschedule && (
            <div className="flex items-center justify-end gap-3 p-6 border-t bg-gray-50">
              <button
                onClick={onClose}
                className="px-6 py-2 bg-gray-600 text-white rounded-lg font-semibold hover:bg-gray-700"
              >
                ‡∏õ‡∏¥‡∏î
              </button>
            </div>
          )}
        </div>
      </div>
    </>
  );
}

// ============================================================================
// EXPORTS
// ============================================================================

export default RescheduleDialog;
