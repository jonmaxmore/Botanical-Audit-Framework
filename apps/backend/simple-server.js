const http = require('http');
const fs = require('fs');
const path = require('path');

// GACP Platform Basic Server
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤ Demo ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Node.js ecosystem

const PORT = 3004;

// MIME types
const mimeTypes = {
  '.html': 'text/html',
  '.css': 'text/css',
  '.js': 'application/javascript',
  '.json': 'application/json',
  '.png': 'image/png',
  '.jpg': 'image/jpg',
  '.gif': 'image/gif',
  '.svg': 'image/svg+xml',
  '.ico': 'image/x-icon',
};

// Mock API responses for demo
const mockResponses = {
  '/api/gacp/workflow': {
    success: true,
    data: {
      workflowStates: 17,
      currentWorkflow: 'WHO-GACP-2024',
      totalApplications: 156,
      activeApplications: 23,
      completedApplications: 133,
      states: [
        {
          id: 1,
          name: '‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
          status: 'active',
          description: '‡∏¢‡∏∑‡πà‡∏ô‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô',
          requirements: ['‡πÉ‡∏ö‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≤‡∏£‡πå‡∏°', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏î‡∏¥‡∏ô', '‡πÅ‡∏ú‡∏ô‡∏õ‡∏•‡∏π‡∏Å'],
          estimatedDuration: '5-7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£',
        },
        {
          id: 2,
          name: '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£',
          status: 'pending',
          description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£',
          requirements: ['‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô'],
          estimatedDuration: '3-5 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£',
        },
        {
          id: 3,
          name: '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà',
          status: 'pending',
          description: '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å',
          requirements: ['‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡∏¥‡∏ô', '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡πâ‡∏≥', '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®'],
          estimatedDuration: '7-14 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£',
        },
      ],
    },
  },

  '/api/gacp/ccps': {
    success: true,
    data: {
      totalCCPs: 8,
      methodology: 'HACCP-based',
      complianceStandard: 'WHO-GACP 2024.1',
      ccps: [
        {
          id: 'CCP01',
          name: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏¥‡∏ô',
          weight: 15,
          description: '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ',
          compliance: 'WHO-GACP Section 4.2',
          criticalLimits: 'pH 6.0-7.5, EC < 2.0 dS/m',
          monitoringProcedure: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
          status: 'Active',
        },
        {
          id: 'CCP02',
          name: '‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ô‡πâ‡∏≥',
          weight: 12,
          description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ',
          compliance: 'WHO-GACP Section 4.3',
          criticalLimits: 'pH 6.5-8.5, ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏£‡∏õ‡∏ô‡πÄ‡∏õ‡∏∑‡πâ‡∏≠‡∏ô',
          monitoringProcedure: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
          status: 'Active',
        },
        {
          id: 'CCP03',
          name: '‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå',
          weight: 10,
          description: '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏°‡∏•‡πá‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≤',
          compliance: 'WHO-GACP Section 4.4',
          criticalLimits: '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏á‡∏≠‡∏Å > 85%',
          monitoringProcedure: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ó‡∏ä‡πå',
          status: 'Active',
        },
        {
          id: 'CCP04',
          name: '‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å',
          weight: 18,
          description: '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•',
          compliance: 'WHO-GACP Section 5.1',
          criticalLimits: '‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
          monitoringProcedure: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô',
          status: 'Active',
        },
        {
          id: 'CCP05',
          name: '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß',
          weight: 14,
          description: '‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß',
          compliance: 'WHO-GACP Section 5.2',
          criticalLimits: '‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
          monitoringProcedure: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ì‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß',
          status: 'Active',
        },
        {
          id: 'CCP06',
          name: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß',
          weight: 11,
          description: '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÅ‡∏´‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô',
          compliance: 'WHO-GACP Section 5.3',
          criticalLimits: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô < 12%, ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ < 25¬∞C',
          monitoringProcedure: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô',
          status: 'Active',
        },
        {
          id: 'CCP07',
          name: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏à‡∏∏',
          weight: 13,
          description: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏à‡∏∏',
          compliance: 'WHO-GACP Section 6.1',
          criticalLimits: '‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°',
          monitoringProcedure: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô',
          status: 'Active',
        },
        {
          id: 'CCP08',
          name: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°',
          weight: 7,
          description: '‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö',
          compliance: 'WHO-GACP Section 7.1',
          criticalLimits: '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô 100%',
          monitoringProcedure: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
          status: 'Active',
        },
      ],
    },
  },

  '/api/gacp/compliance': {
    success: true,
    data: {
      standards: ['WHO-GACP', 'Thai-FDA', 'ASEAN-TM'],
      version: '2024.1',
      effectiveDate: '2024-01-01',
      totalRequirements: 156,
      implementationStatus: 'Active',
      categories: [
        {
          name: '‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å',
          requirements: 45,
          compliance: 'WHO-GACP Section 4',
          status: 'Compliant',
        },
        {
          name: '‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û',
          requirements: 38,
          compliance: 'WHO-GACP Section 5',
          status: 'Compliant',
        },
        {
          name: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß',
          requirements: 29,
          compliance: 'WHO-GACP Section 6',
          status: 'Compliant',
        },
        {
          name: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£',
          requirements: 44,
          compliance: 'WHO-GACP Section 7',
          status: 'Compliant',
        },
      ],
      certificationLevel: 'GACP-Premium',
      validUntil: '2025-12-31',
      lastAudit: '2024-10-01',
      nextAudit: '2025-04-01',
    },
  },

  '/api/monitoring/health': {
    success: true,
    status: 'healthy',
    timestamp: new Date().toISOString(),
    data: {
      database: {
        status: 'connected',
        isHealthy: true,
        responseTime: 45,
        successRate: '99.8',
      },
      api: {
        uptime: 3600,
        version: '1.0.0',
        environment: 'demo',
      },
      system: {
        memory: {
          heapUsed: 25165824,
          heapTotal: 33554432,
        },
        platform: 'win32',
        nodeVersion: 'v18.17.0',
      },
    },
  },
};

// Create HTTP server
const server = http.createServer((req, res) => {
  let filePath = req.url;

  // Handle API endpoints
  if (filePath.startsWith('/api/')) {
    handleAPIRequest(req, res);
    return;
  }

  // Handle static files
  if (filePath === '/') {
    filePath = '/demo.html';
  }

  // Remove query parameters
  filePath = filePath.split('?')[0];

  const fullPath = path.join(__dirname, 'public', filePath);
  const extname = path.extname(fullPath);
  const contentType = mimeTypes[extname] || 'text/plain';

  fs.readFile(fullPath, (err, content) => {
    if (err) {
      if (err.code === 'ENOENT') {
        // File not found
        res.writeHead(404, { 'Content-Type': 'text/html' });
        res.end(`
          <html>
            <head><title>404 - Page Not Found</title></head>
            <body style="font-family: Arial, sans-serif; text-align: center; padding: 50px;">
              <h1>üö´ ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö</h1>
              <p>‡πÑ‡∏ü‡∏•‡πå: ${filePath}</p>
              <p><a href="/demo.html">üéÆ ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Demo</a></p>
              <p><a href="/monitoring-dashboard.html">üìä ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Monitoring</a></p>
            </body>
          </html>
        `);
      } else {
        // Server error
        res.writeHead(500);
        res.end('Server Error');
      }
    } else {
      // Success
      res.writeHead(200, {
        'Content-Type': contentType,
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      });
      res.end(content);
    }
  });
});

function handleAPIRequest(req, res) {
  const url = req.url.split('?')[0];

  // Set CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  res.setHeader('Content-Type', 'application/json');

  // Handle OPTIONS request
  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }

  // Handle POST requests (like score calculation)
  if (req.method === 'POST' && url === '/api/gacp/test/score-calculation') {
    let body = '';
    req.on('data', chunk => {
      body += chunk.toString();
    });
    req.on('end', () => {
      try {
        const data = JSON.parse(body);
        const scores = data.scores;

        // Calculate weighted score
        let totalWeighted = 0;
        let totalWeight = 0;
        const breakdown = {};

        const weights = {
          CCP01: 15,
          CCP02: 12,
          CCP03: 10,
          CCP04: 18,
          CCP05: 14,
          CCP06: 11,
          CCP07: 13,
          CCP08: 7,
        };

        for (const [ccp, score] of Object.entries(scores)) {
          const weight = weights[ccp] || 10;
          const weighted = (score * weight) / 100;
          totalWeighted += weighted;
          totalWeight += weight;
          breakdown[ccp] = { score, weight, weighted };
        }

        const totalScore = (totalWeighted / totalWeight) * 100;
        let certificateLevel = 'GACP-Basic';
        let weightedScore = 'Poor';

        if (totalScore >= 90) {
          certificateLevel = 'GACP-Premium';
          weightedScore = 'Excellent';
        } else if (totalScore >= 80) {
          certificateLevel = 'GACP-Standard';
          weightedScore = 'Good';
        } else if (totalScore >= 70) {
          certificateLevel = 'GACP-Basic';
          weightedScore = 'Fair';
        }

        const response = {
          success: true,
          data: {
            totalScore: Math.round(totalScore * 100) / 100,
            weightedScore,
            certificateLevel,
            breakdown,
            compliance: totalScore >= 75 ? 'Passed' : 'Failed',
            recommendations:
              totalScore < 75
                ? ['‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û', '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•']
                : ['‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏î‡∏µ', '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô'],
          },
        };

        res.writeHead(200);
        res.end(JSON.stringify(response, null, 2));
      } catch (error) {
        res.writeHead(400);
        res.end(JSON.stringify({ success: false, error: 'Invalid JSON data' }));
      }
    });
    return;
  }

  // Handle GET requests
  if (mockResponses[url]) {
    res.writeHead(200);
    res.end(JSON.stringify(mockResponses[url], null, 2));
  } else {
    res.writeHead(404);
    res.end(
      JSON.stringify({
        success: false,
        error: 'API endpoint not found',
        available_endpoints: Object.keys(mockResponses),
      })
    );
  }
}

// Start server
server.listen(PORT, () => {
  console.log('üåø GACP Platform Demo Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!');
  console.log('='.repeat(50));
  console.log(`üöÄ Server: http://localhost:${PORT}`);
  console.log(`üéÆ Demo Page: http://localhost:${PORT}/demo.html`);
  console.log(`üìä Monitoring: http://localhost:${PORT}/monitoring-dashboard.html`);
  console.log('='.repeat(50));
  console.log('üìã Available API Endpoints:');
  Object.keys(mockResponses).forEach(endpoint => {
    console.log(`   - ${endpoint}`);
  });
  console.log('='.repeat(50));
  console.log('‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô! ‡πÄ‡∏õ‡∏¥‡∏î browser ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏ó‡∏µ‡πà URL ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô');
});

// Handle server shutdown
process.on('SIGTERM', () => {
  console.log('üõë GACP Platform Demo Server ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
  server.close();
});

process.on('SIGINT', () => {
  console.log('\nüõë GACP Platform Demo Server ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
  server.close();
  process.exit(0);
});
