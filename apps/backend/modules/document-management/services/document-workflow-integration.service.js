/**
 * Document Workflow Integration Service
 *
 * Purpose: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Document Management ‡∏Å‡∏±‡∏ö Application Workflow ‡πÅ‡∏•‡∏∞ modules ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
 *
 * Business Logic:
 * 1. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ validate
 * 2. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï application progress
 * 3. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
 * 4. ‡πÄ‡∏°‡∏∑‡πà‡∏≠ application ‡∏ñ‡∏π‡∏Å‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
 *
 * Integration Points:
 * - Application Module ‚Üí Document Requirements
 * - Certificate Module ‚Üí PDF Generation
 * - Notification Module ‚Üí Document Alerts
 * - Audit Module ‚Üí Document Tracking
 */

class DocumentWorkflowIntegration {
  constructor({
    documentService,
    applicationService,
    certificateService,
    notificationService,
    auditService,
    eventBus,
  }) {
    this.documentService = documentService;
    this.applicationService = applicationService;
    this.certificateService = certificateService;
    this.notificationService = notificationService;
    this.auditService = auditService;
    this.eventBus = eventBus;

    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô event listeners
    this._registerEventListeners();
  }

  /**
   * ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö document workflow
   */
  _registerEventListeners() {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    this.eventBus.on('DocumentUploaded', this.handleDocumentUploaded.bind(this));

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï application
    this.eventBus.on('DocumentValidated', this.handleDocumentValidated.bind(this));

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    this.eventBus.on('DocumentRejected', this.handleDocumentRejected.bind(this));

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF
    this.eventBus.on('CertificateGenerated', this.handleCertificateGenerated.bind(this));

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    this.eventBus.on('DocumentExpiringSoon', this.handleDocumentExpiringSoon.bind(this));

    console.log('üìÅ Document workflow integration initialized');
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   * Workflow: Document Upload ‚Üí Validation ‚Üí Security Check ‚Üí Application Update
   */
  async handleDocumentUploaded(event) {
    try {
      console.log(`üìÑ Processing uploaded document: ${event.payload.documentId}`);

      const { documentId, applicationId, documentType, userId } = event.payload;

      // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      const document = await this.documentService.getDocumentById(documentId);
      if (!document) {
        throw new Error(`Document not found: ${documentId}`);
      }

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (Virus Scan)
      console.log(`üîç Starting security validation for: ${documentId}`);
      const securityCheck = await this.documentService.performSecurityCheck(documentId);

      if (!securityCheck.safe) {
        await this._handleUnsafeDocument(documentId, securityCheck.threats, userId);
        return;
      }

      // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (OCR + Validation)
      console.log(`üìã Starting content validation for: ${documentId}`);
      const contentValidation = await this.documentService.validateDocumentContent(
        documentId,
        documentType
      );

      if (!contentValidation.valid) {
        await this.eventBus.publish({
          type: 'DocumentValidationFailed',
          payload: {
            documentId,
            applicationId,
            userId,
            errors: contentValidation.errors,
            documentType,
          },
          timestamp: new Date(),
        });
        return;
      }

      // 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô VALIDATED
      await this.documentService.updateDocumentStatus(documentId, 'VALIDATED', {
        validatedAt: new Date(),
        validationResults: contentValidation,
      });

      // 5. ‡∏™‡πà‡∏á event ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
      await this.eventBus.publish({
        type: 'DocumentValidated',
        payload: {
          documentId,
          applicationId,
          documentType,
          userId,
          validationResults: contentValidation,
        },
        timestamp: new Date(),
      });

      console.log(`‚úÖ Document validation completed: ${documentId}`);
    } catch (error) {
      console.error(`‚ùå Document upload processing failed: ${event.payload.documentId}`, error);

      await this.eventBus.publish({
        type: 'DocumentProcessingFailed',
        payload: {
          documentId: event.payload.documentId,
          error: error.message,
          userId: event.payload.userId,
        },
        timestamp: new Date(),
      });
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   * Workflow: Document Validated ‚Üí Update Application Progress ‚Üí Check Completeness
   */
  async handleDocumentValidated(event) {
    try {
      console.log(`‚úÖ Processing validated document: ${event.payload.documentId}`);

      const { documentId, applicationId, documentType, userId } = event.payload;

      // 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï application progress
      await this.applicationService.updateDocumentProgress(applicationId, documentType, {
        documentId,
        status: 'VALIDATED',
        validatedAt: new Date(),
      });

      console.log(`üìù Updated application progress: ${applicationId}`);

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const application = await this.applicationService.getApplicationById(applicationId);
      const completenessCheck =
        await this.applicationService.checkDocumentCompleteness(applicationId);

      if (completenessCheck.isComplete) {
        // ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ application
        await this.applicationService.updateStatus(applicationId, 'DOCUMENTS_COMPLETE');

        console.log(`üéâ All documents completed for application: ${applicationId}`);

        // ‡∏™‡πà‡∏á event ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        await this.eventBus.publish({
          type: 'ApplicationDocumentsComplete',
          payload: {
            applicationId,
            userId,
            completedAt: new Date(),
          },
          timestamp: new Date(),
        });
      }

      // 3. ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
      await this.notificationService.sendDocumentValidatedNotification({
        userId,
        applicationId,
        documentType,
        documentId,
        channels: ['email', 'in-app'],
      });

      // 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å audit log
      await this.auditService.logAction({
        action: 'DOCUMENT_VALIDATED',
        entityType: 'DOCUMENT',
        entityId: documentId,
        userId,
        metadata: {
          applicationId,
          documentType,
        },
      });
    } catch (error) {
      console.error(`‚ùå Document validation processing failed: ${event.payload.documentId}`, error);
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
   * Workflow: Document Rejected ‚Üí Notify User ‚Üí Update Application
   */
  async handleDocumentRejected(event) {
    try {
      console.log(`‚ùå Processing rejected document: ${event.payload.documentId}`);

      const { documentId, applicationId, userId, rejectionReasons } = event.payload;

      // 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô REJECTED
      await this.documentService.updateDocumentStatus(documentId, 'REJECTED', {
        rejectedAt: new Date(),
        rejectionReasons,
      });

      // 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï application progress
      await this.applicationService.updateDocumentProgress(
        applicationId,
        event.payload.documentType,
        {
          documentId,
          status: 'REJECTED',
          rejectedAt: new Date(),
          rejectionReasons,
        }
      );

      // 3. ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
      await this.notificationService.sendDocumentRejectedNotification({
        userId,
        applicationId,
        documentType: event.payload.documentType,
        rejectionReasons,
        channels: ['email', 'sms', 'in-app'],
      });

      // 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å audit log
      await this.auditService.logAction({
        action: 'DOCUMENT_REJECTED',
        entityType: 'DOCUMENT',
        entityId: documentId,
        userId,
        metadata: {
          applicationId,
          rejectionReasons,
        },
      });

      console.log(`üìß Document rejection notifications sent for: ${documentId}`);
    } catch (error) {
      console.error(`‚ùå Document rejection processing failed: ${event.payload.documentId}`, error);
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
   * Workflow: Certificate Generated ‚Üí Create PDF Document ‚Üí Link to Application
   */
  async handleCertificateGenerated(event) {
    try {
      console.log(`üèÜ Processing certificate generation: ${event.payload.certificateNumber}`);

      const { certificateId, certificateNumber, applicationId, userId } = event.payload;

      // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
      const certificate = await this.certificateService.getCertificateById(certificateId);
      if (!certificate) {
        throw new Error(`Certificate not found: ${certificateId}`);
      }

      // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
      const pdfDocument = await this.documentService.createCertificatePDF({
        certificate,
        applicationId,
        documentType: 'CERTIFICATE_PDF',
        userId,
      });

      console.log(`üìÑ Certificate PDF created: ${pdfDocument.id}`);

      // 3. Link ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF ‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
      await this.certificateService.updateCertificatePDF(certificateId, {
        documentId: pdfDocument.id,
        pdfUrl: pdfDocument.downloadUrl,
        generatedAt: new Date(),
      });

      // 4. ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
      await this.notificationService.sendCertificateReadyNotification({
        userId,
        applicationId,
        certificateNumber,
        downloadUrl: pdfDocument.downloadUrl,
        channels: ['email', 'sms', 'in-app'],
      });

      // 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å audit log
      await this.auditService.logAction({
        action: 'CERTIFICATE_PDF_GENERATED',
        entityType: 'DOCUMENT',
        entityId: pdfDocument.id,
        userId,
        metadata: {
          certificateId,
          certificateNumber,
          applicationId,
        },
      });

      console.log(`‚úÖ Certificate PDF workflow completed: ${certificateNumber}`);
    } catch (error) {
      console.error(
        `‚ùå Certificate PDF generation failed: ${event.payload.certificateNumber}`,
        error
      );
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
   * Workflow: Document Expiring ‚Üí Send Renewal Reminders
   */
  async handleDocumentExpiringSoon(event) {
    try {
      console.log(`‚è∞ Processing expiring document: ${event.payload.documentId}`);

      const { documentId, userId, documentType, daysUntilExpiry } = event.payload;

      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      await this.notificationService.sendDocumentRenewalReminder({
        userId,
        documentId,
        documentType,
        daysUntilExpiry,
        channels: ['email', 'sms', 'in-app'],
      });

      console.log(`üì® Document renewal reminder sent: ${documentId} (${daysUntilExpiry} days)`);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å audit log
      await this.auditService.logAction({
        action: 'DOCUMENT_RENEWAL_REMINDER_SENT',
        entityType: 'DOCUMENT',
        entityId: documentId,
        userId,
        metadata: {
          documentType,
          daysUntilExpiry,
        },
      });
    } catch (error) {
      console.error(`‚ùå Document expiry processing failed: ${event.payload.documentId}`, error);
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
   */
  async _handleUnsafeDocument(documentId, threats, userId) {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô QUARANTINED
    await this.documentService.updateDocumentStatus(documentId, 'QUARANTINED', {
      quarantinedAt: new Date(),
      threats,
    });

    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    await this.notificationService.sendSecurityAlertNotification({
      userId,
      documentId,
      threats,
      channels: ['email', 'in-app'],
    });

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å security audit log
    await this.auditService.logSecurityEvent({
      event: 'UNSAFE_DOCUMENT_DETECTED',
      entityType: 'DOCUMENT',
      entityId: documentId,
      userId,
      severity: 'HIGH',
      metadata: { threats },
    });

    console.log(`üö® Unsafe document quarantined: ${documentId}`);
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (Scheduled Task)
   * ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 08:00 ‡∏ô.
   */
  async checkExpiringDocuments() {
    try {
      console.log('üîç Checking for expiring documents...');

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 30, 7, ‡πÅ‡∏•‡∏∞ 1 ‡∏ß‡∏±‡∏ô
      const expiringRanges = [30, 7, 1];

      for (const days of expiringRanges) {
        const expiringDocuments = await this.documentService.findDocumentsExpiringSoon(days);

        for (const document of expiringDocuments) {
          await this.eventBus.publish({
            type: 'DocumentExpiringSoon',
            payload: {
              documentId: document.id,
              userId: document.userId,
              documentType: document.documentType,
              daysUntilExpiry: days,
              expiryDate: document.expiryDate,
            },
            timestamp: new Date(),
          });
        }

        console.log(`üìä Found ${expiringDocuments.length} documents expiring in ${days} days`);
      }
    } catch (error) {
      console.error('‚ùå Failed to check expiring documents:', error);
    }
  }
}

module.exports = DocumentWorkflowIntegration;
