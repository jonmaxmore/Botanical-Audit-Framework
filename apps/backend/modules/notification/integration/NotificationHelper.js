/**
 * Notification Helper Module
 *
 * Provides convenient functions for other modules to send notifications.
 * Part of Clean Architecture - Integration Layer
 */

const Notification = require('../domain/entities/Notification');

class NotificationHelper {
  constructor(sendNotificationUseCase) {
    this.sendNotificationUseCase = sendNotificationUseCase;
  }

  // Farm Notifications
  async notifyFarmApproved(farmData, farmerData) {
    return this.sendNotificationUseCase.execute({
      recipientId: farmerData.id,
      recipientEmail: farmerData.email,
      type: Notification.TYPE.FARM_APPROVED,
      title: `‡∏ü‡∏≤‡∏£‡πå‡∏° ${farmData.name} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß`,
      message: `‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÑ‡∏î‡πâ`,
      priority: Notification.PRIORITY.HIGH,
      channels: [Notification.CHANNEL.IN_APP, Notification.CHANNEL.EMAIL],
      actionUrl: `/farmer/farms/${farmData.id}`,
      actionLabel: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ü‡∏≤‡∏£‡πå‡∏°',
      relatedEntity: { type: 'farm', id: farmData.id },
      metadata: { farmName: farmData.name },
    });
  }

  async notifyFarmRejected(farmData, farmerData, reason) {
    return this.sendNotificationUseCase.execute({
      recipientId: farmerData.id,
      recipientEmail: farmerData.email,
      type: Notification.TYPE.FARM_REJECTED,
      title: `‡∏ü‡∏≤‡∏£‡πå‡∏° ${farmData.name} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥`,
      message: `‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å: ${reason}`,
      priority: Notification.PRIORITY.HIGH,
      channels: [Notification.CHANNEL.IN_APP, Notification.CHANNEL.EMAIL],
      actionUrl: `/farmer/farms/${farmData.id}`,
      actionLabel: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      relatedEntity: { type: 'farm', id: farmData.id },
      metadata: { farmName: farmData.name, reason },
    });
  }

  // Survey Notifications
  async notifySurveySubmitted(surveyData, farmerData) {
    return this.sendNotificationUseCase.execute({
      recipientId: farmerData.id,
      recipientEmail: farmerData.email,
      type: Notification.TYPE.SURVEY_SUBMITTED,
      title: '‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à GAP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      message: `‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏° ${surveyData.farmName} ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà`,
      priority: Notification.PRIORITY.MEDIUM,
      channels: [Notification.CHANNEL.IN_APP, Notification.CHANNEL.EMAIL],
      actionUrl: `/farmer/surveys/${surveyData.id}`,
      actionLabel: '‡∏î‡∏π‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à',
      relatedEntity: { type: 'survey', id: surveyData.id },
    });
  }

  async notifySurveyApproved(surveyData, farmerData) {
    return this.sendNotificationUseCase.execute({
      recipientId: farmerData.id,
      recipientEmail: farmerData.email,
      type: Notification.TYPE.SURVEY_APPROVED,
      title: '‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à GAP ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
      message: `‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏° ${surveyData.farmName} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß`,
      priority: Notification.PRIORITY.HIGH,
      channels: [Notification.CHANNEL.IN_APP, Notification.CHANNEL.EMAIL],
      actionUrl: `/farmer/surveys/${surveyData.id}`,
      actionLabel: '‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô',
      relatedEntity: { type: 'survey', id: surveyData.id },
    });
  }

  async notifySurveyRevisionRequired(surveyData, farmerData, reason) {
    return this.sendNotificationUseCase.execute({
      recipientId: farmerData.id,
      recipientEmail: farmerData.email,
      type: Notification.TYPE.SURVEY_REVISION_REQUIRED,
      title: '‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç',
      message: `‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏° ${surveyData.farmName} ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ${reason}`,
      priority: Notification.PRIORITY.HIGH,
      channels: [Notification.CHANNEL.IN_APP, Notification.CHANNEL.EMAIL],
      actionUrl: `/farmer/surveys/${surveyData.id}/edit`,
      actionLabel: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à',
      relatedEntity: { type: 'survey', id: surveyData.id },
      metadata: { reason },
    });
  }

  // Certificate Notifications
  async notifyCertificateIssued(certificateData, farmerData) {
    return this.sendNotificationUseCase.execute({
      recipientId: farmerData.id,
      recipientEmail: farmerData.email,
      type: Notification.TYPE.CERTIFICATE_ISSUED,
      title: '‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      message: `‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á GACP ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${certificateData.certificateNumber} ‡∏ñ‡∏π‡∏Å‡∏≠‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      priority: Notification.PRIORITY.HIGH,
      channels: [Notification.CHANNEL.IN_APP, Notification.CHANNEL.EMAIL],
      actionUrl: `/farmer/certificates/${certificateData.id}`,
      actionLabel: '‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á',
      relatedEntity: { type: 'certificate', id: certificateData.id },
    });
  }

  async notifyCertificateExpiring(certificateData, farmerData, daysLeft) {
    return this.sendNotificationUseCase.execute({
      recipientId: farmerData.id,
      recipientEmail: farmerData.email,
      type: Notification.TYPE.CERTIFICATE_EXPIRING,
      title: '‚ö†Ô∏è ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
      message: `‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á ${certificateData.certificateNumber} ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô ${daysLeft} ‡∏ß‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏`,
      priority: Notification.PRIORITY.URGENT,
      channels: [Notification.CHANNEL.IN_APP, Notification.CHANNEL.EMAIL, Notification.CHANNEL.SMS],
      actionUrl: `/farmer/certificates/${certificateData.id}/renew`,
      actionLabel: '‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á',
      relatedEntity: { type: 'certificate', id: certificateData.id },
      metadata: { daysLeft },
    });
  }

  async notifyCertificateExpired(certificateData, farmerData) {
    return this.sendNotificationUseCase.execute({
      recipientId: farmerData.id,
      recipientEmail: farmerData.email,
      type: Notification.TYPE.CERTIFICATE_EXPIRED,
      title: '‚ö†Ô∏è ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß',
      message: `‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á ${certificateData.certificateNumber} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß`,
      priority: Notification.PRIORITY.URGENT,
      channels: [Notification.CHANNEL.IN_APP, Notification.CHANNEL.EMAIL],
      actionUrl: `/farmer/certificates/${certificateData.id}/renew`,
      actionLabel: '‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á',
      relatedEntity: { type: 'certificate', id: certificateData.id },
    });
  }

  // Training Notifications
  async notifyTrainingEnrolled(courseData, farmerData) {
    return this.sendNotificationUseCase.execute({
      recipientId: farmerData.id,
      recipientEmail: farmerData.email,
      type: Notification.TYPE.TRAINING_ENROLLED,
      title: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏ö‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      message: `‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™ ${courseData.title} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      priority: Notification.PRIORITY.MEDIUM,
      channels: [Notification.CHANNEL.IN_APP, Notification.CHANNEL.EMAIL],
      actionUrl: `/farmer/training/${courseData.id}`,
      actionLabel: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
      relatedEntity: { type: 'course', id: courseData.id },
    });
  }

  async notifyTrainingCompleted(courseData, farmerData, score) {
    return this.sendNotificationUseCase.execute({
      recipientId: farmerData.id,
      recipientEmail: farmerData.email,
      type: Notification.TYPE.TRAINING_COMPLETED,
      title: 'üéâ ‡∏à‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏ö‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß',
      message: `‡∏ó‡πà‡∏≤‡∏ô‡∏à‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™ ${courseData.title} ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${score}%`,
      priority: Notification.PRIORITY.HIGH,
      channels: [Notification.CHANNEL.IN_APP, Notification.CHANNEL.EMAIL],
      actionUrl: `/farmer/training/${courseData.id}/certificate`,
      actionLabel: '‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£',
      relatedEntity: { type: 'course', id: courseData.id },
      metadata: { score },
    });
  }

  // Document Notifications
  async notifyDocumentApproved(documentData, farmerData) {
    return this.sendNotificationUseCase.execute({
      recipientId: farmerData.id,
      recipientEmail: farmerData.email,
      type: Notification.TYPE.DOCUMENT_APPROVED,
      title: '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
      message: `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ${documentData.name} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß`,
      priority: Notification.PRIORITY.MEDIUM,
      channels: [Notification.CHANNEL.IN_APP],
      actionUrl: `/farmer/documents/${documentData.id}`,
      relatedEntity: { type: 'document', id: documentData.id },
    });
  }

  async notifyDocumentRejected(documentData, farmerData, reason) {
    return this.sendNotificationUseCase.execute({
      recipientId: farmerData.id,
      recipientEmail: farmerData.email,
      type: Notification.TYPE.DOCUMENT_REJECTED,
      title: '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
      message: `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ${documentData.name} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: ${reason}`,
      priority: Notification.PRIORITY.HIGH,
      channels: [Notification.CHANNEL.IN_APP, Notification.CHANNEL.EMAIL],
      actionUrl: `/farmer/documents/${documentData.id}`,
      actionLabel: '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà',
      relatedEntity: { type: 'document', id: documentData.id },
      metadata: { reason },
    });
  }

  // System Notifications
  async sendSystemAnnouncement(title, message, priority = Notification.PRIORITY.MEDIUM) {
    // Use SendBroadcastNotificationUseCase for system announcements
    // This is a helper - actual implementation should use the broadcast use case
    console.log('System announcement:', { title, message, priority });
    // Implementation depends on broadcast use case availability
  }
}

module.exports = NotificationHelper;
