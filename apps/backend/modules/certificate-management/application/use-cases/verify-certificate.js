const { createLogger } = require('../../../../shared/logger');
const logger = createLogger('certificate-management-verify-certificate');

/**
 * Verify Certificate Use Case
 *
 * Business Logic: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (Public Service)
 *
 * Workflow:
 * 1. ‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞ verification code (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
 * 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
 * 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 * 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 * 5. ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 */

class VerifyCertificateUseCase {
  constructor({ certificateRepository, auditService }) {
    this.certificateRepository = certificateRepository;
    this.auditService = auditService;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (Public API)
   * @param {Object} params - ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   * @param {string} params.certificateNumber - ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
   * @param {string} params.verificationCode - ‡∏£‡∏´‡∏±‡∏™‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (optional)
   * @param {string} params.clientIP - IP ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   * @returns {Object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   */
  async execute({ certificateNumber, verificationCode, clientIP }) {
    try {
      logger.info(`üîç Verifying certificate: ${certificateNumber}`);

      // 1. Validate input
      if (!certificateNumber) {
        throw new Error('Certificate number is required');
      }

      // 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      const certificate =
        await this.certificateRepository.findByCertificateNumber(certificateNumber);

      if (!certificate) {
        await this._logVerificationAttempt({
          certificateNumber,
          verificationCode,
          clientIP,
          result: 'NOT_FOUND',
          timestamp: new Date()
        });

        return {
          isValid: false,
          status: 'NOT_FOUND',
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
          details: {
            certificateNumber,
            verifiedAt: new Date()
          }
        };
      }

      // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö verification code (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (verificationCode && certificate.verificationCode !== verificationCode) {
        await this._logVerificationAttempt({
          certificateNumber,
          verificationCode,
          clientIP,
          result: 'INVALID_CODE',
          certificateId: certificate.id,
          timestamp: new Date()
        });

        return {
          isValid: false,
          status: 'INVALID_CODE',
          message: '‡∏£‡∏´‡∏±‡∏™‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
          details: {
            certificateNumber,
            verifiedAt: new Date()
          }
        };
      }

      // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
      const validationResult = this._validateCertificateStatus(certificate);

      // 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
      certificate.incrementVerificationCount();
      await this.certificateRepository.save(certificate);

      await this._logVerificationAttempt({
        certificateNumber,
        verificationCode,
        clientIP,
        result: validationResult.status,
        certificateId: certificate.id,
        timestamp: new Date()
      });

      // 6. ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
      if (validationResult.isValid) {
        logger.info(`‚úÖ Certificate verification successful: ${certificateNumber}`);

        return {
          isValid: true,
          status: 'VALID',
          message: '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ',
          certificate: {
            certificateNumber: certificate.certificateNumber,
            farmerName: certificate.farmerName,
            farmName: certificate.farmName,
            farmLocation: certificate.farmLocation,
            certificationStandard: certificate.certificationStandard,
            issuedDate: certificate.issuedDate,
            expiryDate: certificate.expiryDate,
            status: certificate.status,
            verificationCount: certificate.verificationCount
          },
          details: {
            verifiedAt: new Date(),
            daysUntilExpiry: this._calculateDaysUntilExpiry(certificate.expiryDate)
          }
        };
      } else {
        console.log(
          `‚ùå Certificate verification failed: ${certificateNumber} - ${validationResult.message}`
        );

        return {
          isValid: false,
          status: validationResult.status,
          message: validationResult.message,
          certificate: {
            certificateNumber: certificate.certificateNumber,
            status: certificate.status,
            farmerName: certificate.farmerName,
            farmName: certificate.farmName
          },
          details: {
            verifiedAt: new Date(),
            ...validationResult.details
          }
        };
      }
    } catch (error) {
      logger.error('‚ùå Certificate verification error:', error);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error
      await this._logVerificationAttempt({
        certificateNumber,
        verificationCode,
        clientIP,
        result: 'ERROR',
        error: error.message,
        timestamp: new Date()
      });

      throw error;
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
   */
  _validateCertificateStatus(certificate) {
    const now = new Date();
    const expiryDate = new Date(certificate.expiryDate);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    switch (certificate.status) {
      case 'ACTIVE':
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if (expiryDate < now) {
          return {
            isValid: false,
            status: 'EXPIRED',
            message: '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß',
            details: {
              expiredDate: expiryDate,
              expiredDays: Math.ceil((now - expiryDate) / (1000 * 60 * 60 * 24))
            }
          };
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const daysUntilExpiry = this._calculateDaysUntilExpiry(expiryDate);
        if (daysUntilExpiry <= 30) {
          return {
            isValid: true,
            status: 'VALID_EXPIRING_SOON',
            message: `‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô ${daysUntilExpiry} ‡∏ß‡∏±‡∏ô`,
            details: { daysUntilExpiry }
          };
        }

        return {
          isValid: true,
          status: 'VALID',
          message: '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ'
        };

      case 'REVOKED':
        return {
          isValid: false,
          status: 'REVOKED',
          message: '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß',
          details: {
            revokedDate: certificate.revocationInfo?.revokedAt,
            revokedReason: certificate.revocationInfo?.reason
          }
        };

      case 'RENEWED':
        return {
          isValid: false,
          status: 'RENEWED',
          message: '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏â‡∏ö‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà',
          details: {
            renewedDate: certificate.renewalInfo?.renewedAt,
            newCertificateId: certificate.renewalInfo?.newCertificateId
          }
        };

      default:
        return {
          isValid: false,
          status: 'INVALID',
          message: `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${certificate.status}`
        };
    }
  }

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
   */
  _calculateDaysUntilExpiry(expiryDate) {
    const now = new Date();
    const expiry = new Date(expiryDate);
    return Math.ceil((expiry - now) / (1000 * 60 * 60 * 24));
  }

  /**
   * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£ audit
   */
  async _logVerificationAttempt(logData) {
    try {
      if (this.auditService) {
        await this.auditService.logVerification(logData);
      } else {
        logger.info('üìù Verification attempt:', logData);
      }
    } catch (error) {
      logger.error('Failed to log verification attempt:', error);
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£ log ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    }
  }
}

module.exports = VerifyCertificateUseCase;
