/**
 * Certificate Workflow Integration Service
 *
 * Purpose: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Application Workflow ‡πÅ‡∏•‡∏∞ Certificate Management
 *
 * Business Logic:
 * 1. ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Application ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å DTAM ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
 * 2. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
 * 3. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
 * 4. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å audit trail
 *
 * Integration Points:
 * - Application Module ‚Üí Certificate Generation
 * - Notification Module ‚Üí Certificate Alerts
 * - Audit Module ‚Üí Certificate Tracking
 */

class CertificateWorkflowIntegration {
  constructor({
    certificateService,
    applicationService,
    notificationService,
    auditService,
    eventBus,
  }) {
    this.certificateService = certificateService;
    this.applicationService = applicationService;
    this.notificationService = notificationService;
    this.auditService = auditService;
    this.eventBus = eventBus;

    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô event listeners
    this._registerEventListeners();
  }

  /**
   * ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö workflow integration
   */
  _registerEventListeners() {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Application ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
    this.eventBus.on('ApplicationDTAMApproved', this.handleApplicationApproved.bind(this));

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï application status
    this.eventBus.on('CertificateGenerated', this.handleCertificateGenerated.bind(this));

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    this.eventBus.on('CertificateExpiringSoon', this.handleCertificateExpiringSoon.bind(this));

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    this.eventBus.on('CertificateExpired', this.handleCertificateExpired.bind(this));

    console.log('üîó Certificate workflow integration initialized');
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠ Application ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å DTAM
   * Workflow: Application (DTAM_APPROVED) ‚Üí Certificate Generation
   */
  async handleApplicationApproved(event) {
    try {
      console.log(`üìã Processing approved application: ${event.payload.applicationId}`);

      const { applicationId, applicationData, approvedBy } = event.payload;

      // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ application ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (applicationData.status !== 'DTAM_APPROVED') {
        console.warn(
          `‚ö†Ô∏è Application ${applicationId} is not in DTAM_APPROVED status: ${applicationData.status}`
        );
        return;
      }

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
      const existingCertificate = await this.certificateService.findByApplicationId(applicationId);
      if (existingCertificate) {
        console.warn(`‚ö†Ô∏è Certificate already exists for application: ${applicationId}`);
        return;
      }

      // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
      console.log(`üèÜ Generating certificate for approved application: ${applicationId}`);

      const certificate = await this.certificateService.generateCertificate({
        applicationId,
        applicationData,
        issuedBy: approvedBy,
        validityPeriod: 36, // 3 years
      });

      console.log(`‚úÖ Certificate generated successfully: ${certificate.certificateNumber}`);

      // 4. ‡∏™‡πà‡∏á event ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
      await this.eventBus.publish({
        type: 'CertificateGenerated',
        payload: {
          certificateId: certificate.id,
          certificateNumber: certificate.certificateNumber,
          applicationId,
          userId: certificate.userId,
          farmId: certificate.farmId,
          issuedBy: approvedBy,
        },
        timestamp: new Date(),
      });
    } catch (error) {
      console.error(
        `‚ùå Failed to process approved application: ${event.payload.applicationId}`,
        error
      );

      // ‡∏™‡πà‡∏á event ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
      await this.eventBus.publish({
        type: 'CertificateGenerationFailed',
        payload: {
          applicationId: event.payload.applicationId,
          error: error.message,
          timestamp: new Date(),
        },
      });
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
   * Workflow: Certificate Generated ‚Üí Update Application Status + Send Notifications
   */
  async handleCertificateGenerated(event) {
    try {
      console.log(`üéâ Processing certificate generation: ${event.payload.certificateNumber}`);

      const { applicationId, certificateId, certificateNumber, userId, farmId } = event.payload;

      // 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Application ‡πÄ‡∏õ‡πá‡∏ô CERTIFICATE_ISSUED
      await this.applicationService.updateStatus(applicationId, 'CERTIFICATE_ISSUED', {
        certificateId,
        certificateNumber,
        issuedAt: new Date(),
      });

      console.log(`üìù Updated application status to CERTIFICATE_ISSUED: ${applicationId}`);

      // 2. ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
      await this.notificationService.sendCertificateIssuedNotification({
        userId,
        farmId,
        certificateNumber,
        applicationId,
        channels: ['email', 'sms', 'in-app'],
      });

      console.log(`üìß Sent certificate issued notification to user: ${userId}`);

      // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å audit log
      await this.auditService.logAction({
        action: 'CERTIFICATE_ISSUED',
        entityType: 'CERTIFICATE',
        entityId: certificateId,
        userId,
        metadata: {
          applicationId,
          certificateNumber,
          farmId,
        },
      });

      console.log(`üìã Audit log recorded for certificate issuance: ${certificateNumber}`);
    } catch (error) {
      console.error(
        `‚ùå Failed to process certificate generation: ${event.payload.certificateNumber}`,
        error
      );
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
   * Workflow: Certificate Expiring Soon ‚Üí Send Renewal Reminders
   */
  async handleCertificateExpiringSoon(event) {
    try {
      console.log(`‚è∞ Processing expiring certificate: ${event.payload.certificateNumber}`);

      const { certificateId, certificateNumber, userId, farmId, daysUntilExpiry } = event.payload;

      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏
      await this.notificationService.sendCertificateRenewalReminder({
        userId,
        farmId,
        certificateId,
        certificateNumber,
        daysUntilExpiry,
        channels: ['email', 'sms', 'in-app'],
      });

      console.log(
        `üì® Sent renewal reminder for certificate: ${certificateNumber} (${daysUntilExpiry} days)`
      );

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å audit log
      await this.auditService.logAction({
        action: 'CERTIFICATE_RENEWAL_REMINDER_SENT',
        entityType: 'CERTIFICATE',
        entityId: certificateId,
        userId,
        metadata: {
          certificateNumber,
          daysUntilExpiry,
          farmId,
        },
      });
    } catch (error) {
      console.error(
        `‚ùå Failed to process expiring certificate: ${event.payload.certificateNumber}`,
        error
      );
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
   * Workflow: Certificate Expired ‚Üí Update Status + Send Notifications
   */
  async handleCertificateExpired(event) {
    try {
      console.log(`‚è≤Ô∏è Processing expired certificate: ${event.payload.certificateNumber}`);

      const { certificateId, certificateNumber, userId, farmId } = event.payload;

      // 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô EXPIRED
      await this.certificateService.updateStatus(certificateId, 'EXPIRED');

      // 2. ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      await this.notificationService.sendCertificateExpiredNotification({
        userId,
        farmId,
        certificateId,
        certificateNumber,
        channels: ['email', 'sms', 'in-app'],
      });

      console.log(`üìß Sent expiration notification for certificate: ${certificateNumber}`);

      // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å audit log
      await this.auditService.logAction({
        action: 'CERTIFICATE_EXPIRED',
        entityType: 'CERTIFICATE',
        entityId: certificateId,
        userId,
        metadata: {
          certificateNumber,
          farmId,
          expiredAt: new Date(),
        },
      });
    } catch (error) {
      console.error(
        `‚ùå Failed to process expired certificate: ${event.payload.certificateNumber}`,
        error
      );
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (Scheduled Task)
   * ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 08:00 ‡∏ô.
   */
  async checkExpiringSooonCertificates() {
    try {
      console.log('üîç Checking for expiring certificates...');

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 30, 7, ‡πÅ‡∏•‡∏∞ 1 ‡∏ß‡∏±‡∏ô
      const expiringRanges = [30, 7, 1];

      for (const days of expiringRanges) {
        const expiringCertificates = await this.certificateService.findExpiringSoon(days);

        for (const certificate of expiringCertificates) {
          await this.eventBus.publish({
            type: 'CertificateExpiringSoon',
            payload: {
              certificateId: certificate.id,
              certificateNumber: certificate.certificateNumber,
              userId: certificate.userId,
              farmId: certificate.farmId,
              daysUntilExpiry: days,
              expiryDate: certificate.expiryDate,
            },
            timestamp: new Date(),
          });
        }

        console.log(
          `üìä Found ${expiringCertificates.length} certificates expiring in ${days} days`
        );
      }
    } catch (error) {
      console.error('‚ùå Failed to check expiring certificates:', error);
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß (Scheduled Task)
   * ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 09:00 ‡∏ô.
   */
  async processExpiredCertificates() {
    try {
      console.log('üîç Processing expired certificates...');

      const expiredCertificates = await this.certificateService.findExpiredCertificates();

      for (const certificate of expiredCertificates) {
        await this.eventBus.publish({
          type: 'CertificateExpired',
          payload: {
            certificateId: certificate.id,
            certificateNumber: certificate.certificateNumber,
            userId: certificate.userId,
            farmId: certificate.farmId,
            expiredAt: new Date(),
          },
          timestamp: new Date(),
        });
      }

      console.log(`üìä Processed ${expiredCertificates.length} expired certificates`);
    } catch (error) {
      console.error('‚ùå Failed to process expired certificates:', error);
    }
  }
}

module.exports = CertificateWorkflowIntegration;
